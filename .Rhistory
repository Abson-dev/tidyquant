units <- stringr::str_sub(x, -1, -1)
if (units %in% c("T", "B", "M")) {
value <- stringr::str_sub(x, 1, -2) %>%
as.numeric()
if (units == "T") {
value <- value * 1e12
} else if (units == "B") {
value <- value * 1e9
} else if (units == "M") {
value <- value * 1e6
}
} else (
value <- as.numeric(value)
)
value
}
convert_to_percent <- function(x) {
# x = character such as "-0.6104%"
units <- stringr::str_sub(x, -1, -1)
if (units %in% c("%")) {
value <- stringr::str_sub(x, 1, -2) %>%
as.numeric()
value <- value * 1 / 100
}
value
}
key_stats <- key_stats_raw %>%
dplyr::mutate(Last.Trade.Date = lubridate::mdy(Last.Trade.Date),
Market.Capitalization = convert_to_numeric(Market.Capitalization),
EBITDA = convert_to_numeric(EBITDA),
Percent.Change.From.52.week.Low = convert_to_percent(Percent.Change.From.52.week.Low),
Percent.Change.From.50.day.Moving.Average = convert_to_percent(Percent.Change.From.50.day.Moving.Average),
Change.in.Percent = convert_to_percent(Change.in.Percent),
Ex.Dividend.Date = lubridate::mdy(Ex.Dividend.Date),
Dividend.Pay.Date = lubridate::mdy(Dividend.Pay.Date),
Revenue = convert_to_numeric(Revenue),
Last.Trade.Time = lubridate::today() + lubridate::as.duration(Last.Trade.Time)
)
key_stats <- key_stats_raw %>%
dplyr::mutate(Last.Trade.Date = lubridate::mdy(Last.Trade.Date),
Market.Capitalization = convert_to_numeric(Market.Capitalization),
EBITDA = convert_to_numeric(EBITDA),
Percent.Change.From.52.week.Low = convert_to_percent(Percent.Change.From.52.week.Low),
Percent.Change.From.50.day.Moving.Average = convert_to_percent(Percent.Change.From.50.day.Moving.Average),
Change.in.Percent = convert_to_percent(Change.in.Percent),
Ex.Dividend.Date = lubridate::mdy(Ex.Dividend.Date),
Dividend.Pay.Date = lubridate::mdy(Dividend.Pay.Date),
Revenue = convert_to_numeric(Revenue)
)
key_stats
key_stats$Last.Trade.Time
time <- key_stats$Last.Trade.Time
time
date <- key_stats$Last.Trade.Date
date
date + time
lubridate::ymd_hms(date + time)
lubridate::ymd_hms(date + seconds(time))
key_stats <- key_stats_raw %>%
dplyr::mutate(Last.Trade.Date = lubridate::mdy(Last.Trade.Date),
Market.Capitalization = convert_to_numeric(Market.Capitalization),
EBITDA = convert_to_numeric(EBITDA),
Percent.Change.From.52.week.Low = convert_to_percent(Percent.Change.From.52.week.Low),
Percent.Change.From.50.day.Moving.Average = convert_to_percent(Percent.Change.From.50.day.Moving.Average),
Change.in.Percent = convert_to_percent(Change.in.Percent),
Ex.Dividend.Date = lubridate::mdy(Ex.Dividend.Date),
Dividend.Pay.Date = lubridate::mdy(Dividend.Pay.Date),
Revenue = convert_to_numeric(Revenue),
Last.Trade.Datetime = lubridate::ymd_hms(Last.Trade.Date + seconds(Last.Trade.Time))
)
View(key_stats)
key_stats_sorted <- key_stats[, order(names(key_stats))]
View(key_stats_sorted)
View(key_stats_sorted)
ncol(key_stats_sorted)
devtools::load_all(".")
document()
tq_get("AAPL", get = "key.statistics")
document()
tq_get("AAPL", get = "key.statistics")
tq_get("AAPL", get = "key.stats")
tq_get("SWKS", get = "key.stats")
# Download file
tmp <- tempfile()
url_base_1 <- 'http://download.finance.yahoo.com/d/quotes.csv?s='
url_base_2 <- '&f='
url_base_3 <- '&e=.csv'
yahoo_tag_list <- stringr::str_c(yahoo_tags$yahoo.tag, collapse = "")
url <- paste0(url_base_1, x, url_base_2, yahoo_tag_list, url_base_3)
# Try various stock exchanges
download.file(url, destfile = tmp, quiet = TRUE)
# Read data
key_stats_raw <- suppressMessages(
suppressWarnings(
readr::read_csv(tmp, col_names = FALSE, na = c("", "NA", "N/A"))
)
)
unlink(tmp)
key_stat_names <- yahoo_tags$yahoo.tag.desc %>%
make.names()
names(key_stats_raw) <- key_stat_names
# Formatting Functions
convert_to_numeric <- function(x) {
# x = character such as "23.4B"
units <- stringr::str_sub(x, -1, -1)
if (units %in% c("T", "B", "M")) {
value <- stringr::str_sub(x, 1, -2) %>%
as.numeric()
if (units == "T") {
value <- value * 1e12
} else if (units == "B") {
value <- value * 1e9
} else if (units == "M") {
value <- value * 1e6
}
} else (
value <- as.numeric(value)
)
value
}
convert_to_percent <- function(x) {
# x = character such as "-0.6104%"
units <- stringr::str_sub(x, -1, -1)
if (units %in% c("%")) {
value <- stringr::str_sub(x, 1, -2) %>%
as.numeric()
value <- value * 1 / 100
}
value
}
# Main formatting script
key_stats <- key_stats_raw %>%
dplyr::mutate(Last.Trade.Date = lubridate::mdy(Last.Trade.Date),
Market.Capitalization = convert_to_numeric(Market.Capitalization),
EBITDA = convert_to_numeric(EBITDA),
Percent.Change.From.52.week.Low = convert_to_percent(Percent.Change.From.52.week.Low),
Percent.Change.From.50.day.Moving.Average = convert_to_percent(Percent.Change.From.50.day.Moving.Average),
Percent.Change.From.200.day.Moving.Average = convert_to_percent(Percent.Change.From.200.day.Moving.Average),
Change.in.Percent = convert_to_percent(Change.in.Percent),
Ex.Dividend.Date = lubridate::mdy(Ex.Dividend.Date),
Dividend.Pay.Date = lubridate::mdy(Dividend.Pay.Date),
Revenue = convert_to_numeric(Revenue),
Last.Trade.Datetime = lubridate::ymd_hms(Last.Trade.Date + seconds(Last.Trade.Time))
)
key_stats <- key_stats_raw %>%
dplyr::mutate(Last.Trade.Date = lubridate::mdy(Last.Trade.Date),
Market.Capitalization = convert_to_numeric(Market.Capitalization),
EBITDA = convert_to_numeric(EBITDA)
)
key_stats <- key_stats_raw %>%
dplyr::mutate(Last.Trade.Date = lubridate::mdy(Last.Trade.Date),
Market.Capitalization = convert_to_numeric(Market.Capitalization),
EBITDA = convert_to_numeric(EBITDA),
Percent.Change.From.52.week.Low = convert_to_percent(Percent.Change.From.52.week.Low),
Percent.Change.From.50.day.Moving.Average = convert_to_percent(Percent.Change.From.50.day.Moving.Average),
Percent.Change.From.200.day.Moving.Average = convert_to_percent(Percent.Change.From.200.day.Moving.Average)
)
key_stats <- key_stats_raw %>%
dplyr::mutate(Last.Trade.Date = lubridate::mdy(Last.Trade.Date),
Market.Capitalization = convert_to_numeric(Market.Capitalization),
EBITDA = convert_to_numeric(EBITDA),
Percent.Change.From.52.week.Low = convert_to_percent(Percent.Change.From.52.week.Low),
Percent.Change.From.50.day.Moving.Average = convert_to_percent(Percent.Change.From.50.day.Moving.Average),
Percent.Change.From.200.day.Moving.Average = convert_to_percent(Percent.Change.From.200.day.Moving.Average),
Change.in.Percent = convert_to_percent(Change.in.Percent),
Ex.Dividend.Date = lubridate::mdy(Ex.Dividend.Date),
Dividend.Pay.Date = lubridate::mdy(Dividend.Pay.Date),
Revenue = convert_to_numeric(Revenue)
)
key_stats_sorted
lubridate::ymd_hms(key_stats_sorted$Last.Trade.Date + seconds(key_stats_sorted$Last.Trade.Time))
key_stats <- key_stats_raw %>%
dplyr::mutate(Last.Trade.Date = lubridate::mdy(Last.Trade.Date),
Market.Capitalization = convert_to_numeric(Market.Capitalization),
EBITDA = convert_to_numeric(EBITDA),
Percent.Change.From.52.week.Low = convert_to_percent(Percent.Change.From.52.week.Low),
Percent.Change.From.50.day.Moving.Average = convert_to_percent(Percent.Change.From.50.day.Moving.Average),
Percent.Change.From.200.day.Moving.Average = convert_to_percent(Percent.Change.From.200.day.Moving.Average),
Change.in.Percent = convert_to_percent(Change.in.Percent),
Ex.Dividend.Date = lubridate::mdy(Ex.Dividend.Date),
Dividend.Pay.Date = lubridate::mdy(Dividend.Pay.Date),
Revenue = convert_to_numeric(Revenue),
Last.Trade.Datetime = lubridate::ymd_hms(Last.Trade.Date + seconds(Last.Trade.Time))
)
lubridate::ymd_hms(key_stats_sorted$Last.Trade.Date + seconds(key_stats_sorted$Last.Trade.Time)) %>% str()
devtools::load_all(".")
tq_get("SWKS", get = "key.stats")
key_stats$Last.Trade.Datetime <- lubridate::ymd_hms(key_stats$Last.Trade.Date +
seconds(key_stats$Last.Trade.Time))
View(key_stats)
tq_get("AAPL", get = "key.stats")
tmp <- tempfile()
url_base_1 <- 'http://download.finance.yahoo.com/d/quotes.csv?s='
url_base_2 <- '&f='
url_base_3 <- '&e=.csv'
yahoo_tag_list <- stringr::str_c(yahoo_tags$yahoo.tag, collapse = "")
url <- paste0(url_base_1, x, url_base_2, yahoo_tag_list, url_base_3)
# Try various stock exchanges
download.file(url, destfile = tmp, quiet = TRUE)
# Read data
key_stats_raw <- suppressMessages(
suppressWarnings(
readr::read_csv(tmp, col_names = FALSE, na = c("", "NA", "N/A"))
)
)
# Unlink tmp
unlink(tmp)
key_stats_raw
key_stats_raw %>% View()
yahoo_tags <- run_yahoo_finance_tags()
devtools::use_data(stock_indexes, yahoo_tags, internal = TRUE, overwrite = TRUE)
x <- stringr::str_to_upper(x) %>%
stringr::str_trim(side = "both") %>%
stringr::str_replace_all("[[:punct:]]", "")
# Check x
if (!is.character(x)) {
err <- "Error: x must be a character string in the form of a valid stock symbol."
stop(err)
}
tryCatch({
# Download file
tmp <- tempfile()
url_base_1 <- 'http://download.finance.yahoo.com/d/quotes.csv?s='
url_base_2 <- '&f='
url_base_3 <- '&e=.csv'
yahoo_tag_list <- stringr::str_c(yahoo_tags$yahoo.tag, collapse = "")
url <- paste0(url_base_1, x, url_base_2, yahoo_tag_list, url_base_3)
# Try various stock exchanges
download.file(url, destfile = tmp, quiet = TRUE)
# Read data
key_stats_raw <- suppressMessages(
suppressWarnings(
readr::read_csv(tmp, col_names = FALSE, na = c("", "NA", "N/A"))
)
)
# Unlink tmp
unlink(tmp)
# Format tidy data frame ----
# Names
key_stat_names <- yahoo_tags$yahoo.tag.desc %>%
make.names()
names(key_stats_raw) <- key_stat_names
# Formatting Functions
convert_to_numeric <- function(x) {
# x = character such as "23.4B"
units <- stringr::str_sub(x, -1, -1)
if (units %in% c("T", "B", "M")) {
value <- stringr::str_sub(x, 1, -2) %>%
as.numeric()
if (units == "T") {
value <- value * 1e12
} else if (units == "B") {
value <- value * 1e9
} else if (units == "M") {
value <- value * 1e6
}
} else (
value <- as.numeric(value)
)
value
}
convert_to_percent <- function(x) {
# x = character such as "-0.6104%"
units <- stringr::str_sub(x, -1, -1)
if (units %in% c("%")) {
value <- stringr::str_sub(x, 1, -2) %>%
as.numeric()
value <- value * 1 / 100
}
value
}
# Main formatting script
key_stats <- key_stats_raw %>%
dplyr::mutate(Last.Trade.Date = lubridate::mdy(Last.Trade.Date),
Market.Capitalization = convert_to_numeric(Market.Capitalization),
EBITDA = convert_to_numeric(EBITDA),
Percent.Change.From.52.week.Low = convert_to_percent(Percent.Change.From.52.week.Low),
Percent.Change.From.50.day.Moving.Average = convert_to_percent(Percent.Change.From.50.day.Moving.Average),
Percent.Change.From.200.day.Moving.Average = convert_to_percent(Percent.Change.From.200.day.Moving.Average),
Change.in.Percent = convert_to_percent(Change.in.Percent),
Ex.Dividend.Date = lubridate::mdy(Ex.Dividend.Date),
Dividend.Pay.Date = lubridate::mdy(Dividend.Pay.Date),
Revenue = convert_to_numeric(Revenue)
)
# Sort by column name
key_stats_sorted <- key_stats[, order(names(key_stats))]
tmp <- tempfile()
url_base_1 <- 'http://download.finance.yahoo.com/d/quotes.csv?s='
url_base_2 <- '&f='
url_base_3 <- '&e=.csv'
yahoo_tag_list <- stringr::str_c(yahoo_tags$yahoo.tag, collapse = "")
url <- paste0(url_base_1, x, url_base_2, yahoo_tag_list, url_base_3)
# Try various stock exchanges
download.file(url, destfile = tmp, quiet = TRUE)
# Read data
key_stats_raw <- suppressMessages(
suppressWarnings(
readr::read_csv(tmp, col_names = FALSE, na = c("", "NA", "N/A"))
)
)
unlink(tmp)
key_stat_names <- yahoo_tags$yahoo.tag.desc %>%
make.names()
names(key_stats_raw) <- key_stat_names
key_stats <- key_stats_raw %>%
dplyr::mutate(Last.Trade.Date = lubridate::mdy(Last.Trade.Date),
Market.Capitalization = convert_to_numeric(Market.Capitalization),
EBITDA = convert_to_numeric(EBITDA),
Percent.Change.From.52.week.Low = convert_to_percent(Percent.Change.From.52.week.Low),
Percent.Change.From.50.day.Moving.Average = convert_to_percent(Percent.Change.From.50.day.Moving.Average),
Percent.Change.From.200.day.Moving.Average = convert_to_percent(Percent.Change.From.200.day.Moving.Average),
Change.in.Percent = convert_to_percent(Change.in.Percent),
Ex.Dividend.Date = lubridate::mdy(Ex.Dividend.Date),
Dividend.Pay.Date = lubridate::mdy(Dividend.Pay.Date),
Revenue = convert_to_numeric(Revenue)
)
key_stats_sorted <- key_stats[, order(names(key_stats))]
key_stats_sorted
key_stats_sorted %>% View()
devtools::load_all(".")
document()
?tq_get
tq_Get("SWKS", get = "key.stats")
tq_get("SWKS", get = "key.stats")
tq_get("SWKS", get = "key.stats") %>% ncol()
document()
?tq_get
document()
?tq_get
?tq_get
document()
tq_get_options()
document()
tq_get_options()
AAPL_key_ratios <- tq_get("AAPL", get = "key.ratios")
AAPL_key_ratios %>% unnest()
AAPL_key_ratios %>% unnest() %>% View()
library(testthat)
get <- "economic.data"
context(paste0("Testing tq_get(get = '", get, "')"))
test1 <- tq_get("CPIAUCSL", get = get,
from = "2016-01-01", to = "2016-06-01",
adjust = TRUE, type = "splits")
test2 <- tq_get("CPIAUCSL", get = get,
from = "2016-01-01", to = "2016-06-01",
adjust = FALSE, type = "price")
#### Tests
test_that("Test returns tibble with correct rows and columns.", {
# Tibble
expect_is(test1, "tbl")
expect_is(test2, "tbl")
# Identical
expect_identical(test1, test2)
# Rows
expect_equal(nrow(test1), 6)
# Columns
expect_equal(ncol(test1), 2)
})
test_that("Test prints warning message on invalid x input.", {
expect_warning(tq_get("XYZ", get = get))
})
test_that("Test returns NA on invalid x input.", {
expect_equal(suppressWarnings(tq_get("XYZ", get = get)), NA)
})
get <- "key.stats"
context(paste0("Testing tq_get(get = '", get, "')"))
test1 <- tq_get("AAPL", get = get,
from = "2016-01-01", to = "2016-06-01")
View(test1)
ncol(test1)
test_that("Test prints warning message on invalid x input.", {
expect_warning(tq_get("XYZ", get = get))
})
test_that("Test returns NA on invalid x input.", {
expect_equal(suppressWarnings(tq_get("XYZ", get = get)), NA)
})
test_that("Test returns tibble with correct rows and columns.", {
# Tibble
expect_is(test1, "tbl")
# Rows
expect_equal(nrow(test1), 1)
# Columns
expect_equal(ncol(test1), 55)
})
test_that("Test prints warning message on invalid x input.", {
expect_warning(tq_get("XYZ", get = get))
})
test_that("Test returns NA on invalid x input.", {
expect_equal(suppressWarnings(tq_get("XYZ", get = get)), NA)
})
c("AAPL", "GOOG") %>% tq_get(get = "key.stats")
c("AAPL", "GOOG") %>% tq_get(get = "key.stats") -> test
test
View(test)
?tq_get
tq_get(c("AAPL", "GOOG", "FB"), get = "key.stats")
devtools::load_all(".")
document()
tq_get(c("AAPL", "GOOG", "FB"), get = "key.stats")
tq_get(c("AAPL", "GOOG", "FB"), get = "key.stats") %>%
select(symbol.x, Ask, Ask.Size, Bid, Bid.Size, Days.High, Days.Low)
aapl_key_stats <- tq_get("AAPL", get = "key.stats")
aapl_key_stats
c("AAPL", "FB", "GOOG") %>%
tq_get(get = "key.stats") %>%
select(symbol.x, Ask, Ask.Size, Bid, Bid.Size, Days.High, Days.Low)
collect_real_time_data <- function(x, interval_sec, n) {
i <- 1
while (n > 0) {
data[,i] <- tq_get(x, get = "key.stats")
Sys.sleep(interval_sec)
data
n <- n - 1
i <- i + 1
}
}
collect_real_time_data <- function(x, interval_sec, n) {
i <- 1
while (n > 0) {
data[,i] <- tq_get(x, get = "key.stats")
Sys.sleep(interval_sec)
n <- n - 1
i <- i + 1
}
return(data)
}
collect_real_time_data("AAPL", interval_sec = 3, n = 5)
data <- tibble()
data
collect_real_time_data <- function(x, interval_sec, n) {
i <- 1
data <- tibble()
while (n > 0) {
data <- bind_rows(data, tq_get(x, get = "key.stats"))
Sys.sleep(interval_sec)
n <- n - 1
i <- i + 1
}
return(data)
}
collect_real_time_data("AAPL", interval_sec = 3, n = 5)
devtools::revdep_check()
revdep_check_save_summary()
revdep_check()
revdep_check_save_summary()
devtools::install_github("mdancho84/tidyquant")
library(tidyquant)
?tq_get
library(tidyquant)
date_chr <- c("2016-01-01", "2017-01-01")
ymd(date_chr)
?as_date
library(devtools)
document()
AMZN <- tq_get("AMZN", get = "stock.prices", from = "2007-01-01", to = "2017-01-01")
today <- ymd("2017-01-01")
twelve_weeks_ago <- today - weeks(12)
AMZN %>%
ggplot(aes(x = date, y = close)) +
tq_geom_candlestick(aes(open = open, close = close, high = high, low = low)) +
labs(title = "AMZN: New Candlestick Geom!",
subtitle = "Visually shows open, high, low, and close information, along with direction",
x = "", y = "Closing Price") +
coord_x_date(xlim = c(twelve_weeks_ago, today),
ylim = c(650, 850))
today <- "2017-01-01"
end <- "2017-01-01"
start <- ymd(end) - weeks(12)
AMZN %>%
ggplot(aes(x = date, y = close)) +
tq_geom_candlestick(aes(open = open, close = close, high = high, low = low)) +
labs(title = "AMZN: New Candlestick Geom!",
subtitle = "Visually shows open, high, low, and close information, along with direction",
x = "", y = "Closing Price") +
coord_x_date(xlim = c(start, end),
ylim = c(650, 850))
end <- "2017-01-01"
start <- ymd(end) - weeks(12)
range <- c(start, end)
range
library(devtools)
devtools::load_all(".")
NASDAQ_first_three <- tq_get("NASDAQ100", get = "stock.index") %>%
head(3) %>%
tq_get(get = "stock.prices")
NASDAQ_first_three
NASDAQ_first_three %>%
group_by(symbol, company) %>%
tq_mutate(ohlc_fun = Ad, mutate_fun = SMA,
col_rename = "rolling.avg.25") %>%
select(-(open:volume))
NASDAQ_first_three %>%
group_by(symbol, company) %>%
tq_mutate(ohlc_fun = Ad, mutate_fun = SMA) %>%
select(-(open:volume))
NASDAQ_first_three %>%
group_by(symbol) %>%
tq_mutate(ohlc_fun = Ad, mutate_fun = SMA) %>%
select(-(open:volume))
?dplyr::n
library(dectools)
library(devtools)
document()
install.packages(c("dendextend", "forcats", "Matrix", "mclust", "RWeka", "tidyquant", "tidyverse"))
document()
library(devtools)
document()
require(installr)
RStudio_CRAN_data_folder <- download_RStudio_CRAN_data(START = '2016-012-01', END = '2017-02-01') # around the time R 3.0.0 was released
RStudio_CRAN_data_folder <- download_RStudio_CRAN_data(START = '2016-12-01', END = '2017-02-01') # around the time R 3.0.0 was released
my_RStudio_CRAN_data <- read_RStudio_CRAN_data(RStudio_CRAN_data_folder)
barplot_package_users_per_day("tidyquant", my_RStudio_CRAN_data)
