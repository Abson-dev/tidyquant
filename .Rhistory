expect_equal(suppressWarnings(tq_get("XYZ", get = get)), NA)
})
get <- "economic.data"
context(paste0("Testing tq_get(get = '", get, "')"))
test1 <- tq_get("CPIAUCSL", get = get,
from = "2016-01-01", to = "2016-06-01",
adjust = TRUE, type = "splits")
test2 <- tq_get("CPIAUCSL", get = get,
from = "2016-01-01", to = "2016-06-01",
adjust = FALSE, type = "price")
#### Tests
test_that("Test returns tibble with correct rows and columns.", {
# Tibble
expect_is(test1, "tbl")
expect_is(test2, "tbl")
# Identical
expect_identical(test1, test2)
# Rows
expect_equal(nrow(test1), 6)
# Columns
expect_equal(ncol(test1), 2)
})
test_that("Test prints warning message on invalid x input.", {
expect_warning(tq_get("XYZ", get = get))
})
test_that("Test returns NA on invalid x input.", {
expect_equal(suppressWarnings(tq_get("XYZ", get = get)), NA)
})
tq_get("CPIAUCSL", get = "economic.data")
getSymbols.FRED("CPIAUCSL")
quantmod::getSymbols.FRED("CPIAUCSL")
devtools::load_all(".")
library(testthat)
library(tidyquant)
#### Setup
get <- "financials"
context(paste0("Testing tq_get(get = '", get, "')"))
test1 <- tq_get("AAPL", get = get,
from = "2016-01-01", to = "2016-06-01",
adjust = TRUE, type = "splits")
test2 <- tq_get("AAPL", get = get,
from = "2016-01-01", to = "2016-06-01",
adjust = FALSE, type = "price")
#### Tests
test_that("Test returns tibble with correct rows and columns.", {
# Tibble
expect_is(test1, "tbl")
expect_is(test2, "tbl")
# Identical
expect_identical(test1, test2)
# Rows
expect_equal(nrow(test1), 3)
# Columns
expect_equal(ncol(test1), 3)
})
test_that("Test prints warning message on invalid x input.", {
expect_warning(tq_get("XYZ", get = get))
})
test_that("Test returns NA on invalid x input.", {
expect_equal(suppressWarnings(tq_get("XYZ", get = get)), NA)
})
library(tidyquant)
#### Setup
get <- "metal.prices"
context(paste0("Testing tq_get(get = '", get, "')"))
test1 <- tq_get("gold", get = get,
from = "2016-01-01", to = "2016-06-01",
adjust = TRUE, type = "splits")
test2 <- tq_get("gold", get = get,
from = "2016-01-01", to = "2016-06-01",
adjust = FALSE, type = "price")
#### Tests
test_that("Test returns tibble with correct rows and columns.", {
# Tibble
expect_is(test1, "tbl")
expect_is(test2, "tbl")
# Identical
expect_identical(test1, test2)
# Rows
expect_equal(nrow(test1), 153)
# Columns
expect_equal(ncol(test1), 2)
})
test_that("Test prints warning message on invalid x input.", {
expect_warning(tq_get("XYZ", get = get))
})
test_that("Test returns NA on invalid x input.", {
expect_equal(suppressWarnings(tq_get("XYZ", get = get)), NA)
})
library(tidyquant)
#### Setup
get <- "economic.data"
context(paste0("Testing tq_get(get = '", get, "')"))
test1 <- tq_get("CPIAUCSL", get = get,
from = "2016-01-01", to = "2016-06-01",
adjust = TRUE, type = "splits")
test2 <- tq_get("CPIAUCSL", get = get,
from = "2016-01-01", to = "2016-06-01",
adjust = FALSE, type = "price")
#### Tests
test_that("Test returns tibble with correct rows and columns.", {
# Tibble
expect_is(test1, "tbl")
expect_is(test2, "tbl")
# Identical
expect_identical(test1, test2)
# Rows
expect_equal(nrow(test1), 6)
# Columns
expect_equal(ncol(test1), 2)
})
test_that("Test prints warning message on invalid x input.", {
expect_warning(tq_get("XYZ", get = get))
})
test_that("Test returns NA on invalid x input.", {
expect_equal(suppressWarnings(tq_get("XYZ", get = get)), NA)
})
getSymbols("CPIAUCSL", src = "FRED")
quantmod::getSymbols("CPIAUCSL", src = "FRED")
quantmod::getSymbols("CPIAUCSL", src = "FRED", auto.assign = F)
quantmod::getSymbols("CPIAUCSL", src = "FRED", auto.assign = F, from = "2016-01-01")
devtools::load_all(".")
library(tidyquant)
#### Setup
get <- "economic.data"
context(paste0("Testing tq_get(get = '", get, "')"))
test1 <- tq_get("CPIAUCSL", get = get,
from = "2016-01-01", to = "2016-06-01",
adjust = TRUE, type = "splits")
test2 <- tq_get("CPIAUCSL", get = get,
from = "2016-01-01", to = "2016-06-01",
adjust = FALSE, type = "price")
#### Tests
test_that("Test returns tibble with correct rows and columns.", {
# Tibble
expect_is(test1, "tbl")
expect_is(test2, "tbl")
# Identical
expect_identical(test1, test2)
# Rows
expect_equal(nrow(test1), 6)
# Columns
expect_equal(ncol(test1), 2)
})
test_that("Test prints warning message on invalid x input.", {
expect_warning(tq_get("XYZ", get = get))
})
test_that("Test returns NA on invalid x input.", {
expect_equal(suppressWarnings(tq_get("XYZ", get = get)), NA)
})
fun        = quantmod::getSymbols
source     = "FRED"
from = as.character(paste0(lubridate::year(lubridate::today()) - 10, "-01-01"))
to   = as.character(lubridate::today())
fun(x, src = source, auto.assign = FALSE, from, to, ...)
fun(x, src = source, auto.assign = FALSE, from, to)
x <- "CPIAUCSL"
fun(x, src = source, auto.assign = FALSE, from, to)
fun()
fun <- quantmod::getSymbols
View(fun)
fun(x, src = source, auto.assign = FALSE, from, to, reload.Symbols = F)
fun(x, src = source, auto.assign = FALSE, from, to, reload.Symbols = T)
quantmod::getSymbols("CPIAUCSL", src = "FRED", auto.assign = F)
devtools::load_all(".")
library(tidyquant)
#### Setup
get <- "economic.data"
context(paste0("Testing tq_get(get = '", get, "')"))
test1 <- tq_get("CPIAUCSL", get = get,
from = "2016-01-01", to = "2016-06-01",
adjust = TRUE, type = "splits")
test2 <- tq_get("CPIAUCSL", get = get,
from = "2016-01-01", to = "2016-06-01",
adjust = FALSE, type = "price")
#### Tests
test_that("Test returns tibble with correct rows and columns.", {
# Tibble
expect_is(test1, "tbl")
expect_is(test2, "tbl")
# Identical
expect_identical(test1, test2)
# Rows
expect_equal(nrow(test1), 6)
# Columns
expect_equal(ncol(test1), 2)
})
test_that("Test prints warning message on invalid x input.", {
expect_warning(tq_get("XYZ", get = get))
})
test_that("Test returns NA on invalid x input.", {
expect_equal(suppressWarnings(tq_get("XYZ", get = get)), NA)
})
devtools::load_all(".")
library(tidyquant)
#### Setup
get <- "economic.data"
context(paste0("Testing tq_get(get = '", get, "')"))
test1 <- tq_get("CPIAUCSL", get = get,
from = "2016-01-01", to = "2016-06-01",
adjust = TRUE, type = "splits")
test2 <- tq_get("CPIAUCSL", get = get,
from = "2016-01-01", to = "2016-06-01",
adjust = FALSE, type = "price")
#### Tests
test_that("Test returns tibble with correct rows and columns.", {
# Tibble
expect_is(test1, "tbl")
expect_is(test2, "tbl")
# Identical
expect_identical(test1, test2)
# Rows
expect_equal(nrow(test1), 6)
# Columns
expect_equal(ncol(test1), 2)
})
test_that("Test prints warning message on invalid x input.", {
expect_warning(tq_get("XYZ", get = get))
})
test_that("Test returns NA on invalid x input.", {
expect_equal(suppressWarnings(tq_get("XYZ", get = get)), NA)
})
library(tidyquant)
#### Setup
get <- "metal.prices"
context(paste0("Testing tq_get(get = '", get, "')"))
test1 <- tq_get("gold", get = get,
from = "2016-01-01", to = "2016-06-01",
adjust = TRUE, type = "splits")
test2 <- tq_get("gold", get = get,
from = "2016-01-01", to = "2016-06-01",
adjust = FALSE, type = "price")
#### Tests
test_that("Test returns tibble with correct rows and columns.", {
# Tibble
expect_is(test1, "tbl")
expect_is(test2, "tbl")
# Identical
expect_identical(test1, test2)
# Rows
expect_equal(nrow(test1), 153)
# Columns
expect_equal(ncol(test1), 2)
})
test_that("Test prints warning message on invalid x input.", {
expect_warning(tq_get("XYZ", get = get))
})
test_that("Test returns NA on invalid x input.", {
expect_equal(suppressWarnings(tq_get("XYZ", get = get)), NA)
})
devtools::load_all(".")
document()
library(devtools)
document()
devtools::load_all(".")
devtools::load_all(".")
library(tidyquant)
#### Setup
get <- "metal.prices"
context(paste0("Testing tq_get(get = '", get, "')"))
test1 <- tq_get("gold", get = get,
from = "2016-01-01", to = "2016-06-01",
adjust = TRUE, type = "splits")
test2 <- tq_get("gold", get = get,
from = "2016-01-01", to = "2016-06-01",
adjust = FALSE, type = "price")
#### Tests
test_that("Test returns tibble with correct rows and columns.", {
# Tibble
expect_is(test1, "tbl")
expect_is(test2, "tbl")
# Identical
expect_identical(test1, test2)
# Rows
expect_equal(nrow(test1), 153)
# Columns
expect_equal(ncol(test1), 2)
})
test_that("Test prints warning message on invalid x input.", {
expect_warning(tq_get("XYZ", get = get))
})
test_that("Test returns NA on invalid x input.", {
expect_equal(suppressWarnings(tq_get("XYZ", get = get)), NA)
})
library(tidyquant)
#### Setup
get <- "economic.data"
context(paste0("Testing tq_get(get = '", get, "')"))
test1 <- tq_get("CPIAUCSL", get = get,
from = "2016-01-01", to = "2016-06-01",
adjust = TRUE, type = "splits")
test2 <- tq_get("CPIAUCSL", get = get,
from = "2016-01-01", to = "2016-06-01",
adjust = FALSE, type = "price")
#### Tests
test_that("Test returns tibble with correct rows and columns.", {
# Tibble
expect_is(test1, "tbl")
expect_is(test2, "tbl")
# Identical
expect_identical(test1, test2)
# Rows
expect_equal(nrow(test1), 6)
# Columns
expect_equal(ncol(test1), 2)
})
test_that("Test prints warning message on invalid x input.", {
expect_warning(tq_get("XYZ", get = get))
})
test_that("Test returns NA on invalid x input.", {
expect_equal(suppressWarnings(tq_get("XYZ", get = get)), NA)
})
devtools::load_all(".")
test1 <- tq_get("CPIAUCSL", get = get,
from = "2016-01-01", to = "2016-06-01",
adjust = TRUE, type = "splits")
tq_get("CPIAUCSL", get = get,
from = "2016-01-01", to = "2016-06-01",
adjust = TRUE, type = "splits")
devtools::load_all(".")
tq_get("CPIAUCSL", get = get,
from = "2016-01-01", to = "2016-06-01",
adjust = TRUE, type = "splits")
f <- quantmod::getSymbols.FRED
f("CPIAUCSL", auto.assign = F)
f("CPIAUCSL", auto.assign = F, from)
f("CPIAUCSL", auto.assign = F, from, src = "google")
devtools::load_all(".")
tq_get("CPIAUCSL", get = "economic.data")
tq_get_util_2 <-
function(x,
get,
from = as.character(paste0(lubridate::year(lubridate::today()) - 10, "-01-01")),
to   = as.character(lubridate::today()),
...) {
# Setup switches based on get
vars <- switch(get,
financial    = list(chr_x      = "stock symbol",
fun        = quantmod::getFinancials,
chr_fun    = "quantmod::getFinancials",
source     = "google"),
metalprice   = list(chr_x      = "metal symbol",
fun        = quantmod::getMetals,
chr_fun    = "quantmod::getMetals",
list_names = "price",
source     = "oanda"),
exchangerate = list(chr_x      = "exchange rate combination",
fun        = quantmod::getFX,
chr_fun    = "quantmod::getFX",
list_names = "exchange.rate",
source     = "oanda"),
economicdata = list(chr_x      = "economic symbol",
fun        = quantmod::getSymbols,
chr_fun    = "quantmod::getSymbols.FRED",
list_names = "price",
source     = "FRED")
)
# Check x
if (!is.character(x)) {
err <- paste0("Error: x must be a character string in the form of a valid ",
vars$chr_x)
stop(err)
}
# Get data; Handle errors
ret <- tryCatch({
suppressWarnings(
suppressMessages(
vars$fun(x, src = vars$source, auto.assign = FALSE, from, to, ...)
)
)
}, error = function(e) {
warn <- paste0("Error at ", vars$chr_x, " ", x,
" during call to ", vars$chr_fun, ".")
warning(warn)
return(NA) # Return NA on error
})
# coerce financials to tibble
if (identical(get, "financial") && class(ret) == "financials") {
# Tidy a single financial statement
tidy_fin <- function(x) {
group <- 1:nrow(x)
df <- dplyr::bind_cols(tibble::tibble(group),
tidyquant::as_tibble(x, preserve_row_names = TRUE)) %>%
dplyr::rename(category = row.names) %>%
tidyr::gather(date, value, -c(category, group)) %>%
dplyr::mutate(date = lubridate::ymd(date)) %>%
dplyr::arrange(group)
df
}
# Setup tibble and map tidy_fin function
ret <- tibble::tibble(
type = c("IS", "IS", "BS", "BS", "CF", "CF"),
period = rep(c("A", "Q"), 3)) %>%
dplyr::mutate(retrieve = paste0("ret$", type, "$", period)) %>%
dplyr::mutate(data = purrr::map(retrieve, ~ eval(parse(text = .x)))) %>%
dplyr::mutate(data = purrr::map(data, tidy_fin)) %>%
dplyr::select(-retrieve) %>%
tidyr::spread(key = period, value = data) %>%
dplyr::rename(annual = A, quarter = Q)
}
# Coerce any xts to tibble
if (xts::is.xts(ret)) {
names(ret) <- vars$list_names
ret <- ret %>%
tidyquant::as_tibble(preserve_row_names = TRUE) %>%
dplyr::rename(date = row.names) %>%
dplyr::mutate(date = lubridate::ymd(date))
# Filter economic data by date
if (identical(get, "economicdata")) {
ret <- ret %>%
dplyr::filter(date >= lubridate::ymd(from) & date <= lubridate::ymd(to))
}
}
ret
}
tq_get_util_2("CPIAUCSL", get = "economic.data")
f <- quantmod::getSymbols.FRED(x, src = "FRED", auto.assign = F, from, to, ...)
f function(x, src = "FRED", auto.assign = F, from, to, ...) <- quantmod::getSymbols.FRED(x, src = "FRED", auto.assign = F, from, to, ...)
f <- function(x, src = "FRED", auto.assign = F, from, to, ...) quantmod::getSymbols.FRED(x, src = "FRED", auto.assign = F, from, to, ...)
f
f("CPIAUCSL", from = "200", to = "123")
f <- function(x, src = "FRED", auto.assign = F, from, to, ...) quantmod::getSymbols(x, src = "FRED", auto.assign = F, from, to, ...)
f("CPIAUCSL", from = "200", to = "123")
f("CPIAUCSL")
f("CPIAUCSL", from = "2016-01-01", to = "2016-06-01")
quantmod::getSymbols.FRED(auto.assign = F, "CPIAUCSL")
devtools::load_all(".")
library(tidyquant)
#### Setup
get <- "economic.data"
context(paste0("Testing tq_get(get = '", get, "')"))
test1 <- tq_get("CPIAUCSL", get = get,
from = "2016-01-01", to = "2016-06-01",
adjust = TRUE, type = "splits")
test2 <- tq_get("CPIAUCSL", get = get,
from = "2016-01-01", to = "2016-06-01",
adjust = FALSE, type = "price")
#### Tests
test_that("Test returns tibble with correct rows and columns.", {
# Tibble
expect_is(test1, "tbl")
expect_is(test2, "tbl")
# Identical
expect_identical(test1, test2)
# Rows
expect_equal(nrow(test1), 6)
# Columns
expect_equal(ncol(test1), 2)
})
test_that("Test prints warning message on invalid x input.", {
expect_warning(tq_get("XYZ", get = get))
})
test_that("Test returns NA on invalid x input.", {
expect_equal(suppressWarnings(tq_get("XYZ", get = get)), NA)
})
library(tidyquant)
#### Setup
get <- "metal.prices"
context(paste0("Testing tq_get(get = '", get, "')"))
test1 <- tq_get("gold", get = get,
from = "2016-01-01", to = "2016-06-01",
adjust = TRUE, type = "splits")
test2 <- tq_get("gold", get = get,
from = "2016-01-01", to = "2016-06-01",
adjust = FALSE, type = "price")
#### Tests
test_that("Test returns tibble with correct rows and columns.", {
# Tibble
expect_is(test1, "tbl")
expect_is(test2, "tbl")
# Identical
expect_identical(test1, test2)
# Rows
expect_equal(nrow(test1), 153)
# Columns
expect_equal(ncol(test1), 2)
})
test_that("Test prints warning message on invalid x input.", {
expect_warning(tq_get("XYZ", get = get))
})
test_that("Test returns NA on invalid x input.", {
expect_equal(suppressWarnings(tq_get("XYZ", get = get)), NA)
})
library(tidyquant)
#### Setup
get <- "financials"
context(paste0("Testing tq_get(get = '", get, "')"))
test1 <- tq_get("AAPL", get = get,
from = "2016-01-01", to = "2016-06-01",
adjust = TRUE, type = "splits")
test2 <- tq_get("AAPL", get = get,
from = "2016-01-01", to = "2016-06-01",
adjust = FALSE, type = "price")
#### Tests
test_that("Test returns tibble with correct rows and columns.", {
# Tibble
expect_is(test1, "tbl")
expect_is(test2, "tbl")
# Identical
expect_identical(test1, test2)
# Rows
expect_equal(nrow(test1), 3)
# Columns
expect_equal(ncol(test1), 3)
})
test_that("Test prints warning message on invalid x input.", {
expect_warning(tq_get("XYZ", get = get))
})
test_that("Test returns NA on invalid x input.", {
expect_equal(suppressWarnings(tq_get("XYZ", get = get)), NA)
})
test()
