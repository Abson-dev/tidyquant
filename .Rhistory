stock_list_with_one_bad_apple %>%
mutate(annual.returns = map(.x = stock.prices,
~ tq_transform(Ad,
transform_fun = periodRetur,
period = "yearly")
)
)
}, error = function(e) {
print(warnings())
})
tryCatch({
stock_list_with_one_bad_apple %>%
mutate(annual.returns = map(.x = stock.prices,
~ tq_transform(x_fun = Ad,
transform_fun = periodReturn,
period = "yearly")
)
)
}, error = function(e) {
print(warnings())
})
tryCatch({
stock_list_with_one_bad_apple %>%
mutate(annual.returns = map(.x = stock.prices,
~ tq_transform(x_fun = Ad,
transform_fun = periodReturn,
period = "yearly")
)
)
}, error = function(e) {
print(warnings())
print(error)
})
tryCatch({
stock_list_with_one_bad_apple %>%
mutate(annual.returns = map(.x = stock.prices,
~ tq_transform(x_fun = Ad,
transform_fun = periodReturn,
period = "yearly")
)
)
}, error = function(e) {
print(warnings())
print(e)
})
tryCatch({
stock_list_with_one_bad_apple %>%
mutate(annual.returns = map(.x = stock.prices,
~ tq_transform(x_fun = Ad,
transform_fun = periodReturn,
period = "yearly")
)
)
}, error = function(e) {
print(warnings())
print(e)
})
devtools::load_all(".")
tryCatch({
stock_list_with_one_bad_apple %>%
mutate(annual.returns = map(.x = stock.prices,
~ tq_transform(x_fun = Ad,
transform_fun = periodReturn,
period = "yearly")
)
)
}, error = function(e) {
print(warnings())
print(e)
})
stock_list_with_one_bad_apple <- tibble(
symbol = c("AAPL", "GOOG", "AMZN", "FB", "BAD APPLE",
"AVGO", "SWKS","NVDA", "V", "MA")
)
stock_list_with_one_bad_apple <- stock_list_with_one_bad_apple %>%
mutate(stock.prices = map(.x = symbol, ~ tq_get(.x, get = "stock.prices")))
stock_list_with_one_bad_apple
stock_list_with_one_bad_apple %>%
mutate(annual.returns = map(.x = stock.prices,
~ tq_transform(x_fun = Ad,
transform_fun = periodReturn,
period = "yearly")
)
)
stock_list_with_one_bad_apple %>%
mutate(annual.returns = map(.x = stock.prices,
~ tq_transform(.x = stock.prices,
x_fun = Ad,
transform_fun = periodReturn,
period = "yearly")
)
)
stock_list_with_one_bad_apple <- tibble(
symbol = c("AAPL", "GOOG", "AMZN", "FB",
"AVGO", "SWKS","NVDA", "V", "MA")
)
stock_list_with_one_bad_apple <- stock_list_with_one_bad_apple %>%
mutate(stock.prices = map(.x = symbol, ~ tq_get(.x, get = "stock.prices")))
stock_list_with_one_bad_apple
stock_list_with_one_bad_apple %>%
mutate(annual.returns = map(.x = stock.prices,
~ tq_transform(.x = stock.prices,
x_fun = Ad,
transform_fun = periodReturn,
period = "yearly")
)
)
stock_list_with_one_bad_apple <- tibble(
symbol = c("AAPL", "GOOG", "AMZN", "FB",
"AVGO", "SWKS","NVDA", "V", "MA")
)
stock_list_with_one_bad_apple <- stock_list_with_one_bad_apple %>%
mutate(stock.prices = map(.x = symbol, ~ tq_get(.x, get = "stock.prices")))
stock_list_with_one_bad_apple
stock_list_with_one_bad_apple %>%
mutate(annual.returns = map(.x = stock.prices,
~ tq_transform(.x = stock.prices,
x_fun = Ad,
transform_fun = periodReturn,
period = "yearly")
)
)
stock_list_with_one_bad_apple %>%
mutate(annual.returns = map(.x = stock.prices,
~ tq_transform(.x,
x_fun = Ad,
transform_fun = periodReturn,
period = "yearly")
)
)
stock_list_with_one_bad_apple %>%
mutate(annual.returns = map(.x = stock.prices,
~ tq_transform(.x,
x_fun = Ad,
transform_fun = periodReturn,
period = "yearly")
)
)
stock_list_with_one_bad_apple <- tibble(
symbol = c("AAPL", "GOOG", "AMZN", "FB", "BAD APPLE",
"AVGO", "SWKS","NVDA", "V", "MA")
)
stock_list_with_one_bad_apple <- stock_list_with_one_bad_apple %>%
mutate(stock.prices = map(.x = symbol, ~ tq_get(.x, get = "stock.prices")))
stock_list_with_one_bad_apple
stock_list_with_one_bad_apple %>%
mutate(annual.returns = map(.x = stock.prices,
~ tq_transform(.x,
x_fun = Ad,
transform_fun = periodReturn,
period = "yearly")
)
)
tryCatch({
stock_list_with_one_bad_apple %>%
mutate(annual.returns = map(.x = stock.prices,
~ tq_transform(.x,
x_fun = Ad,
transform_fun = periodReturn,
period = "yearly")
)
)
}, error = function(e) {
print(e)
})
stock_list_with_one_bad_apple <- tibble(
symbol = c("AAPL", "GOOG", "AMZN", "FB", "BAD APPLE",
"AVGO", "SWKS","NVDA", "V", "MA")
)
stock_list_with_one_bad_apple <- stock_list_with_one_bad_apple %>%
mutate(stock.prices = map(.x = symbol, ~ tq_get(.x, get = "stock.prices")))
stock_list_with_one_bad_apple
print(warnings())
print("Error at stock symbol BAD APPLE during call to quantmod::getSymbols.")
cat("Error at stock symbol BAD APPLE during call to quantmod::getSymbols.")
AAPL <- tq_get("AAPL")
AAPL %>%
tq_mutate(Cl, MACD) %>%
tq_mutate(HLC, BBands) %>%
tq_mutate(OHLC, OpCl)
?tq_get
tq_get("SP500", get = "stock.index", use_fallback = TRUE)
tq_get("SP500", get = "stock.index", use_fallback = TRUE)
print(warnings())
stock_list_with_one_bad_apple <- tibble(
symbol = c("AAPL", "GOOG", "AMZN", "FB", "BAD APPLE",
"AVGO", "SWKS","NVDA", "V", "MA")
) %>%
# Step 1: Get stock prices
mutate(stock.prices = map(.x = symbol, ~ tq_get(.x, get = "stock.prices")),
len = map_int(stock.prices, length)) %>%
# Step 2: Filter out errors; errors have are a list of length 1
filter(len > 1) %>%
select(-len) %>%
# Step 3: Perform period returns
mutate(annual.returns = map(.x = stock.prices,
~ tq_transform(.x,
x_fun = Ad,
transform_fun = periodReturn,
period = "yearly")
)
)
stock_list_with_one_bad_apple <- tibble(
symbol = c("AAPL", "GOOG", "AMZN", "FB", "BAD APPLE",
"AVGO", "SWKS","NVDA", "V", "MA")
) %>%
# Step 1: Get stock prices
mutate(stock.prices = map(.x = symbol, ~ tq_get(.x, get = "stock.prices")),
len = map_int(stock.prices, length)) %>%
# Step 2: Filter out errors; errors have are a list of length 1
filter(len > 1) %>%
select(-len) %>%
# Step 3: Perform period returns
mutate(annual.returns = map(.x = stock.prices,
~ tq_transform(.x,
x_fun = Ad,
transform_fun = periodReturn,
period = "yearly")
)
)
stock_list_with_one_bad_apple <- tibble(
symbol = c("AAPL", "GOOG", "AMZN", "FB", "BAD APPLE",
"AVGO", "SWKS","NVDA", "V", "MA")
) %>%
# Step 1: Get stock prices
mutate(stock.prices = map(.x = symbol, ~ tq_get(.x, get = "stock.prices")))
stock_list_with_one_bad_apple <- tibble(
symbol = c("AAPL", "GOOG", "AMZN", "FB", "BAD APPLE",
"AVGO", "SWKS","NVDA", "V", "MA")
) %>%
# Step 1: Get stock prices
mutate(stock.prices = map(.x = symbol, ~ tq_get(.x, get = "stock.prices"))),
stock_list_with_one_bad_apple <- tibble(
symbol = c("AAPL", "GOOG", "AMZN", "FB", "BAD APPLE",
"AVGO", "SWKS","NVDA", "V", "MA")
) %>%
# Step 1: Get stock prices
mutate(stock.prices = map(.x = symbol, ~ tq_get(.x, get = "stock.prices")),
len = map_int(stock.prices, length)) %>%
# Step 2: Filter out errors; errors have are a list of length 1
filter(len > 1) %>%
select(-len) %>%
# Step 3: Perform period returns
mutate(annual.returns = map(.x = stock.prices,
~ tq_transform(.x,
x_fun = Ad,
transform_fun = periodReturn,
period = "yearly")
)
)
stock_list_with_one_bad_apple
stock_list_with_one_bad_apple <- tibble(
symbol = c("AAPL", "GOOG", "AMZN", "FB", "BAD APPLE",
"AVGO", "SWKS","NVDA", "V", "MA")
) %>%
# Step 1: Get stock prices
mutate(stock.prices = map(.x = symbol, ~ tq_get(.x, get = "stock.prices")),
len = map_chr(stock.prices, class))
View(stock_list_with_one_bad_apple)
class(NA)
class(AAPL)
stock_list_with_one_bad_apple <- tibble(
symbol = c("AAPL", "GOOG", "AMZN", "FB", "BAD APPLE",
"AVGO", "SWKS","NVDA", "V", "MA")
) %>%
# Step 1: Get stock prices
mutate(stock.prices = map(.x = symbol, ~ tq_get(.x, get = "stock.prices")),
len = map_chr(stock.prices, ~ class(.x)[[1]]))
stock_list_with_one_bad_apple
stock_list_with_one_bad_apple <- tibble(
symbol = c("AAPL", "GOOG", "AMZN", "FB", "BAD APPLE",
"AVGO", "SWKS","NVDA", "V", "MA")
) %>%
# Step 1: Get stock prices
mutate(stock.prices = map(.x = symbol, ~ tq_get(.x, get = "stock.prices")),
class = map_chr(stock.prices, ~ class(.x)[[1]])) %>%
# Step 2: Filter out errors; errors have a class of "logical"
filter(class != "logical") %>%
select(-class) %>%
# Step 3: Perform period returns
mutate(annual.returns = map(.x = stock.prices,
~ tq_transform(.x,
x_fun = Ad,
transform_fun = periodReturn,
period = "yearly")
)
)
stock_list_with_one_bad_apple
devtools::load_all(".")
AAPL %>%
tq_mutate(Cl, MACD) %>%
tq_mutate(HLC, BBands) %>%
tq_mutate(OHLC, OpCl)
AAPL %>%
tq_mutate(Cl, MACD) %>%
tq_mutate(HLC, BBands) %>%
tq_mutate(OHLC, OpCl, OHLC = F)
AAPL %>%
tq_mutate(Cl, MACD) %>%
tq_mutate(HLC, BBands) %>%
tq_mutate(OHLC, OpCl)
AAPL %>%
# tq_mutate(Cl, MACD) %>%
# tq_mutate(HLC, BBands) %>%
tq_mutate(OHLC, OpCl)
?OpCl
AAPL %>%
tq_mutate(Cl, MACD) %>%
tq_mutate(HLC, BBands) %>%
tq_mutate(OHLC, ClCl)
seriesAccel(AAPL)
seriesAccel(OHLC(AAPL))
seriesAccel(Cl(AAPL))
Cl(AAPL)
getSymbols("AAPL", auto.assign = F) %>% seriesAccel()
getSymbols("AAPL", auto.assign = F) %>% seriesHi()
getSymbols("AAPL", auto.assign = F) %>% seriesIncr()
getSymbols("AAPL", auto.assign = F) %>% seriesIncr(thres = 1.5)
getSymbols("AAPL", auto.assign = F) %>% seriesAccel(thres = 1.5)
AAPL %>% arrange(date)
AAPL %>% arrange(desc(date))
AAPL %>% arrange(desc(date)) %>% as_xts
AAPL %>% arrange(desc(date)) %>% as_xts()
AAPL  %>% as_xts()
AAPL %>% as_xts()
AAPL %>% as_xts(date_col = date)
AAPL %>% arrange(desc(date)) %>% as_xts(date_col = date)
devtools::load_all(".")
AAPL %>% arrange(desc(date)) %>% as_xts(date_col = date1)
devtools::load_all(".")
AAPL %>% arrange(desc(date)) %>% as_xts(date_col = date1)
AAPL %>% arrange(desc(date)) %>% as_xts(date_col = date1
AAPL %>% arrange(desc(date)) %>% as_xts(date_col = date)
?bind_cols
devtools::load_all(".")
eventdata %>%
as_tibble(preserve_row_names = T) %>%
dplyr::mutate(row.names = lubridate::ymd_hms(row.names)) %>%
tq_transform_xy(.x = V1, transform_fun = to.period, period = "days", OHLC = F)
time_index <- seq(from = as.POSIXct("2012-05-15 07:00"),
to = as.POSIXct("2012-05-17 18:00"),
by = "hour")
set.seed(1)
value <- rnorm(n = length(time_index))
eventdata <- xts(value, order.by = time_index)
eventdata %>%
as_tibble(preserve_row_names = T) %>%
dplyr::mutate(row.names = lubridate::ymd_hms(row.names)) %>%
tq_transform_xy(.x = V1, transform_fun = to.period, period = "days", OHLC = F)
eventdata %>%
as_tibble(preserve_row_names = T) %>%
dplyr::mutate(row.names = lubridate::ymd_hms(row.names)) %>%
tq_mutate_xy(.x = V1, mutate_fun = MACD)
eventdata %>%
as_tibble(preserve_row_names = T) %>%
dplyr::mutate(row.names = lubridate::ymd_hms(row.names)) %>%
tq_mutate_xy(.x = V1, mutate_fun = to.monthly)
?to.monthly
devtools::load_all(".")
eventdata
eventdata %>%
as_tibble(preserve_row_names = T) %>%
dplyr::mutate(row.names = lubridate::ymd_hms(row.names)) %>%
tq_mutate_xy(.x = V1, mutate_fun = MACD)
AAPL <- tq_get("AAPL", get = "stock.prices", from = "2010-01-01", to = "2015-01-01")
AAPL_chain <- AAPL %>%
tq_mutate(Cl, MACD) %>%
tq_mutate(HLC, BBands) %>%
tq_mutate(OHLC, OpCl)
set.seed(1)
value <- rnorm(n = length(time_index))
eventdata <- xts(value, order.by = time_index)
AAPL_chain <- AAPL %>%
tq_mutate(Cl, MACD) %>%
tq_mutate(HLC, BBands) %>%
tq_mutate(OHLC, OpCl)
AAPL <- tq_get("AAPL", get = "stock.prices", from = "2010-01-01", to = "2015-01-01")
FB <-  tq_get("FB", get = "stock.prices", from = "2010-01-01", to = "2015-01-01")
# Piping test
test1 <- AAPL %>%
tq_mutate(Cl, MACD) %>%
tq_mutate(HLC, BBands) %>%
tq_mutate(OHLC, OpCl)
# Hourly data test
set.seed(1)
value <- rnorm(n = length(time_index))
hourly_data <- xts(value, order.by = time_index)
test2 <- hourly_data %>%
as_tibble(preserve_row_names = T) %>%
dplyr::mutate(row.names = lubridate::ymd_hms(row.names)) %>%
tq_transform_xy(.x = V1, transform_fun = to.period, period = "days", OHLC = F)
test3 <- hourly_data %>%
as_tibble(preserve_row_names = T) %>%
dplyr::mutate(row.names = lubridate::ymd_hms(row.names)) %>%
tq_mutate_xy(.x = V1, mutate_fun = MACD)
hourly_data <- xts(value, order.by = time_index)
value <- rnorm(n = length(time_index))
hourly_data <- xts(value, order.by = time_index)
time_index <- seq(from = as.POSIXct("2012-05-15 07:00"),
to = as.POSIXct("2012-05-17 18:00"),
by = "hour")
set.seed(1)
value <- rnorm(n = length(time_index))
hourly_data <- xts(value, order.by = time_index)
test2 <- hourly_data %>%
as_tibble(preserve_row_names = T) %>%
dplyr::mutate(row.names = lubridate::ymd_hms(row.names)) %>%
tq_transform_xy(.x = V1, transform_fun = to.period, period = "days", OHLC = F)
test3 <- hourly_data %>%
as_tibble(preserve_row_names = T) %>%
dplyr::mutate(row.names = lubridate::ymd_hms(row.names)) %>%
tq_mutate_xy(.x = V1, mutate_fun = MACD)
test1
test_that("Test returns tibble with correct rows and columns.", {
# Tibble
expect_is(test1, "tbl")
# Rows
expect_equal(nrow(test1), 1258)
# Columns
expect_equal(ncol(test1), 14)
})
library(testthat)
test_that("Test returns tibble with correct rows and columns.", {
# Tibble
expect_is(test1, "tbl")
# Rows
expect_equal(nrow(test1), 1258)
# Columns
expect_equal(ncol(test1), 14)
})
test2
test_that("Test returns tibble with correct rows and columns.", {
# Tibble
expect_is(test2, "tbl")
# Rows
expect_equal(nrow(test2), 3)
# Columns
expect_equal(ncol(test2), 2)
})
test3
AAPL %>%
tq_mutate(x_fun = OHLCV, mutate_fun = to.monthly)
AAPL %>%
tq_mutate(x_fun = OHLCV, mutate_fun = to.period, period = "months")
AAPL %>%
tq_transform(x_fun = OHLCV, mutate_fun = to.period, period = "months")
AAPL %>%
tq_transform(x_fun = OHLCV, transform_fun = to.period, period = "months")
AAPL %>%
tq_mutate(x_fun = OHLCV, mutate_fun = to.period, period = "months")
AAPL %>%
tq_transform(x_fun = OHLCV, transform_fun = to.period, period = "months")
AAPL %>%
tq_transform(x_fun = OHLCV, transform_fun = to.monthly)
tib2 <- AAPL %>%
tq_transform(x_fun = OHLCV, transform_fun = to.monthly)
find_date_cols(tib2)
tib2 <- AAPL %>%
tq_transform(x_fun = OHLCV, transform_fun = to.monthly, OHLC = F)
tib2
date_cols <- find_date_cols(tib2)
date_cols <- date_cols[date_cols == TRUE]
date_cols
devtools::load_all(".")
AAPL %>%
tq_mutate(x_fun = OHLCV, mutate_fun = to.period, period = "months")
AAPL %>%
tq_mutate(x_fun = OHLCV, mutate_fun = to.monthly)
devtools::load_all(".")
AAPL %>%
tq_mutate(x_fun = OHLCV, mutate_fun = to.period, period = "months")
date_cols <- get_col_name_date_or_date_time(tib2)
get_col_name_date_or_date_time(tib2)
devtools::load_all(".")
get_col_name_date_or_date_time(tib2)
devtools::load_all(".")
check_date_or_date_time_exists(AAPL)
check_date_or_date_time_exists(tib2)
devtools::load_all(".")
date_cols_exist <- check_date_or_date_time_exists(tib2)
AAPL %>%
tq_mutate(x_fun = OHLCV, mutate_fun = to.period, period = "months")
AAPL %>%
tq_mutate(x_fun = OHLCV, mutate_fun = to.period, period = "monthly")
AAPL %>%
tq_mutate(x_fun = OHLCV, mutate_fun = to.period, period = "months")
devtools::load_all(".")
AAPL %>%
tq_mutate(x_fun = OHLCV, mutate_fun = to.period, period = "months")
AAPL %>%
tq_transform(x_fun = OHLCV, transform_fun = to.period, period = "months")
AAPL %>%
tq_transform(x_fun = OHLCV, transform_fun = to.period, period = "daily")
AAPL %>%
tq_transform(x_fun = OHLCV, transform_fun = to.period, period = "days")
AAPL %>%
tq_transform(x_fun = OHLCV, transform_fun = to.period, period = "days", OHLC = F)
AAPL %>%
tq_mutate(x_fun = OHLCV, mutate_fun = to.period, period = "days", OHLC = F)
AAPL %>%
tq_mutate(x_fun = OHLCV, mutate_fun = to.period, period = "months", OHLC = F)
devtools::load_all(".")
AAPL %>%
tq_mutate(x_fun = OHLCV, mutate_fun = to.period, period = "months", OHLC = F)
AAPL %>%
tq_mutate(x_fun = OHLCV, mutate_fun = to.monthly)
test_that("Test prints warning message on invalid x input.", {
expect_error(
AAPL %>%
tq_mutate(x_fun = OHLCV, mutate_fun = to.monthly)
)
})
