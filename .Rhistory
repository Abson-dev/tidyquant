GeomPolygonHollow <- ggproto("GeomPolygonHollow", GeomPolygon,
default_aes = aes(colour = "black", fill = NA, size = 0.5, linetype = 1,
alpha = NA)
)
geom_chull <- function(mapping = NULL, data = NULL,
position = "identity", na.rm = FALSE, show.legend = NA,
inherit.aes = TRUE, ...) {
layer(
stat = StatChull, geom = GeomPolygonHollow, data = data, mapping = mapping,
position = position, show.legend = show.legend, inherit.aes = inherit.aes,
params = list(na.rm = na.rm, ...)
)
}
ggplot(mpg, aes(displ, hwy)) +
geom_point() +
geom_chull()
ggplot(mpg, aes(displ, hwy, cyl)) +
geom_point() +
geom_chull()
ggplot(mpg, aes(displ, hwy, col = cyl)) +
geom_point() +
geom_chull()
ggplot(mpg, aes(displ, hwy, col = factor(cyl))) +
geom_point() +
geom_chull()
ggplot(mpg, aes(displ, hwy)) +
geom_point() +
geom_chull(col = factor(cyl))
ggplot(mpg, aes(displ, hwy)) +
geom_point() +
geom_chull(aes(col = factor(cyl)))
ggplot(mpg, aes(displ, hwy)) +
geom_point() +
geom_chull(aes(col = factor(cyl)))
ggplot(mpg, aes(displ, hwy)) +
geom_point() +
geom_chull(aes(col = factor(cyl), fill = factor(cyl)), alpha = 0.15)
theme_grey()$legend.key
new_theme <- theme_grey() + theme(legend.key = element_rect(colour = "red"))
new_theme$legend.key
new_theme <- theme_grey() %+replace% theme(legend.key = element_rect(colour = "red"))
new_theme$legend.key
df <- data.frame(x = 1:3, y = 1:3)
base <- ggplot(df, aes(x, y)) +
geom_point() +
theme_minimal()
base
base + theme(text = element_text(colour = "red"))
?SMA
data
chull(data$x, data$y)
data[chull(data$x, data$y), , drop = FALSE]
data[chull(data$x, data$y), , drop = TRUE]
AAPL <- tq_get("AAPL")
StatSMA <- ggproto("StatSMA", Stat,
required_aes = c("x", "y"),
compute_group = function(data, scales, params, n = 10) {
tidyquant::tq_transform_xy(x = data$y, transform_fun = SMA, n = n)
}
)
stat_SMA <- function(mapping = NULL, data = NULL, geom = "line",
position = "identity", na.rm = FALSE, show.legend = NA,
inherit.aes = TRUE, n = 50, formula = y ~ x,
...) {
layer(
stat = StatSMA, data = data, mapping = mapping, geom = geom,
position = position, show.legend = show.legend, inherit.aes = inherit.aes,
params = list(n = n, na.rm = na.rm, ...)
)
}
ggplot(AAPL, aes(date, Adjusted)) +
geom_point() +
stat_SMA()
StatSMA <- ggproto("StatSMA", Stat,
required_aes = c("x", "y"),
compute_group = function(data, scales, params, n = 10) {
tidyquant::tq_transform_xy(x = data$y, transform_fun = SMA, n = n)
}
)
stat_SMA <- function(mapping = NULL, data = NULL, geom = "line",
position = "identity", na.rm = FALSE, show.legend = NA,
inherit.aes = TRUE, n = 50, formula = y ~ x,
...) {
layer(
stat = StatSMA, data = data, mapping = mapping, geom = geom,
position = position, show.legend = show.legend, inherit.aes = inherit.aes,
params = list(n = n, na.rm = na.rm, ...)
)
}
ggplot(AAPL, aes(date, adjusted)) +
geom_point() +
stat_SMA()
StatSMA <- ggproto("StatSMA", Stat,
required_aes = c("x", "y"),
compute_group = function(data, scales, params, n = 10) {
tidyquant::tq_transform_xy(x = data$y, transform_fun = SMA, n = n)
}
)
stat_SMA <- function(mapping = NULL, data = NULL, geom = "line",
position = "identity", na.rm = FALSE, show.legend = NA,
inherit.aes = TRUE, n = 50, formula = y ~ x,
...) {
layer(
stat = StatSMA, data = data, mapping = mapping, geom = geom,
position = position, show.legend = show.legend, inherit.aes = inherit.aes,
params = list(n = n, na.rm = na.rm, ...)
)
}
ggplot(data = AAPL, aes(date, adjusted)) +
geom_line() +
stat_SMA()
StatSMA <- ggproto("StatSMA", Stat,
required_aes = c("x", "y"),
compute_group = function(data, scales, params, n = 10) {
tidyquant::tq_transform_xy(data = data, x = y, transform_fun = SMA, n = n)
}
)
stat_SMA <- function(mapping = NULL, data = NULL, geom = "line",
position = "identity", na.rm = FALSE, show.legend = NA,
inherit.aes = TRUE, n = 50, formula = y ~ x,
...) {
layer(
stat = StatSMA, data = data, mapping = mapping, geom = geom,
position = position, show.legend = show.legend, inherit.aes = inherit.aes,
params = list(n = n, na.rm = na.rm, ...)
)
}
ggplot(data = AAPL, aes(date, adjusted)) +
geom_line() +
stat_SMA()
AAPL
tq_transform_xy(AAPL, x = price, transform_fun = SMA)
tq_transform_xy(AAPL, x = adjusted, transform_fun = SMA)
StatSMA <- ggproto("StatSMA", Stat,
required_aes = c("x", "y"),
compute_group = function(data, scales, params, n = 10) {
tidyquant::tq_transform_xy(AAPL, x = adjusted, transform_fun = SMA, n = n)
}
)
stat_SMA <- function(mapping = NULL, data = NULL, geom = "line",
position = "identity", na.rm = FALSE, show.legend = NA,
inherit.aes = TRUE, n = 50, formula = y ~ x,
...) {
layer(
stat = StatSMA, data = data, mapping = mapping, geom = geom,
position = position, show.legend = show.legend, inherit.aes = inherit.aes,
params = list(n = n, na.rm = na.rm, ...)
)
}
ggplot(data = AAPL, aes(date, adjusted)) +
geom_line() +
stat_SMA()
StatSMA <- ggproto("StatSMA", Stat,
required_aes = c("x", "y"),
compute_group = function(data, scales, params, n = 10) {
tidyquant::tq_transform_xy(data, x = y, transform_fun = SMA, n = n)
}
)
stat_SMA <- function(mapping = NULL, data = NULL, geom = "line",
position = "identity", na.rm = FALSE, show.legend = NA,
inherit.aes = TRUE, n = 50, formula = y ~ x,
...) {
layer(
stat = StatSMA, data = data, mapping = mapping, geom = geom,
position = position, show.legend = show.legend, inherit.aes = inherit.aes,
params = list(n = n, na.rm = na.rm, ...)
)
}
ggplot(data = AAPL, aes(date, adjusted)) +
geom_line() +
stat_SMA()
StatSMA <- ggproto("StatSMA", Stat,
required_aes = c("x", "y"),
compute_group = function(data, scales, params, n = 10) {
tidyquant::tq_transform_xy(data, x = data$y, transform_fun = SMA, n = n)
}
)
stat_SMA <- function(mapping = NULL, data = NULL, geom = "line",
position = "identity", na.rm = FALSE, show.legend = NA,
inherit.aes = TRUE, n = 50, formula = y ~ x,
...) {
layer(
stat = StatSMA, data = data, mapping = mapping, geom = geom,
position = position, show.legend = show.legend, inherit.aes = inherit.aes,
params = list(n = n, na.rm = na.rm, ...)
)
}
ggplot(data = AAPL, aes(date, adjusted)) +
geom_line() +
stat_SMA()
StatSMA <- ggproto("StatSMA", Stat,
required_aes = c("x", "y"),
compute_group = function(data, scales, params, n = 10) {
tidyquant::tq_transform_xy(data, x = y, transform_fun = SMA, n = n)
}
)
stat_SMA <- function(mapping = NULL, data = NULL, geom = "line",
position = "identity", na.rm = FALSE, show.legend = NA,
inherit.aes = TRUE, n = 50, formula = y ~ x,
...) {
layer(
stat = StatSMA, data = data, mapping = mapping, geom = geom,
position = position, show.legend = show.legend, inherit.aes = inherit.aes,
params = list(n = n, na.rm = na.rm, ...)
)
}
ggplot(data = AAPL, aes(date, adjusted)) +
geom_line() +
stat_SMA()
y <- adjusted
y <- "adjusted"
eval(parse(text = y))
y
StatSMA <- ggproto("StatSMA", Stat,
required_aes = c("x", "y"),
compute_group = function(data, scales, params, n = 10) {
SMA(data$x)
}
)
stat_SMA <- function(mapping = NULL, data = NULL, geom = "line",
position = "identity", na.rm = FALSE, show.legend = NA,
inherit.aes = TRUE, n = 50, formula = y ~ x,
...) {
layer(
stat = StatSMA, data = data, mapping = mapping, geom = geom,
position = position, show.legend = show.legend, inherit.aes = inherit.aes,
params = list(n = n, na.rm = na.rm, ...)
)
}
ggplot(data = AAPL, aes(date, adjusted)) +
geom_line() +
stat_SMA()
StatSMA <- ggproto("StatSMA", Stat,
required_aes = c("x", "y"),
compute_group = function(data, scales, params, n = 10) {
data$y <- SMA(data$x, n = n)
}
)
stat_SMA <- function(mapping = NULL, data = NULL, geom = "line",
position = "identity", na.rm = FALSE, show.legend = NA,
inherit.aes = TRUE, n = 50, formula = y ~ x,
...) {
layer(
stat = StatSMA, data = data, mapping = mapping, geom = geom,
position = position, show.legend = show.legend, inherit.aes = inherit.aes,
params = list(n = n, na.rm = na.rm, ...)
)
}
ggplot(data = AAPL, aes(date, adjusted)) +
geom_line() +
stat_SMA()
?SMA
data[chull(data$x, data$y), , drop = FALSE]
chull(data$x, data$y)
StatSMA <- ggproto("StatSMA", Stat,
required_aes = c("x", "y"),
compute_group = function(data, scales, params, n = 10) {
sma <- TTR::SMA(data$x, n = n)
dplyr::bind_cols(data$x, tibble::as_tibble(sma))
}
)
stat_SMA <- function(mapping = NULL, data = NULL, geom = "line",
position = "identity", na.rm = FALSE, show.legend = NA,
inherit.aes = TRUE, n = 50, formula = y ~ x,
...) {
layer(
stat = StatSMA, data = data, mapping = mapping, geom = geom,
position = position, show.legend = show.legend, inherit.aes = inherit.aes,
params = list(n = n, na.rm = na.rm, ...)
)
}
ggplot(data = AAPL, aes(date, adjusted)) +
geom_line() +
stat_SMA()
StatSMA <- ggproto("StatSMA", Stat,
required_aes = c("x", "y"),
compute_group = function(data, scales, params, n = 10) {
sma <- TTR::SMA(data$y, n = n)
dplyr::bind_cols(data$x, tibble::as_tibble(sma))
}
)
stat_SMA <- function(mapping = NULL, data = NULL, geom = "line",
position = "identity", na.rm = FALSE, show.legend = NA,
inherit.aes = TRUE, n = 50, formula = y ~ x,
...) {
layer(
stat = StatSMA, data = data, mapping = mapping, geom = geom,
position = position, show.legend = show.legend, inherit.aes = inherit.aes,
params = list(n = n, na.rm = na.rm, ...)
)
}
ggplot(data = AAPL, aes(date, adjusted)) +
geom_line() +
stat_SMA()
SMA(c(1,2,3,4,5,6), n = 3)
sma <- SMA(c(1,2,3,4,5,6), n = 3)
tibble(sma)
StatSMA <- ggproto("StatSMA", Stat,
required_aes = c("x", "y"),
compute_group = function(data, scales, params, n = 10) {
sma <- TTR::SMA(data$y, n = n)
dplyr::bind_cols(data$x, tibble::tibble(sma))
}
)
stat_SMA <- function(mapping = NULL, data = NULL, geom = "line",
position = "identity", na.rm = FALSE, show.legend = NA,
inherit.aes = TRUE, n = 50, formula = y ~ x,
...) {
layer(
stat = StatSMA, data = data, mapping = mapping, geom = geom,
position = position, show.legend = show.legend, inherit.aes = inherit.aes,
params = list(n = n, na.rm = na.rm, ...)
)
}
ggplot(data = AAPL, aes(date, adjusted)) +
geom_line() +
stat_SMA()
SMA(AAPL$adjusted)
StatSMA <- ggproto("StatSMA", Stat,
required_aes = c("x", "y"),
compute_group = function(data, scales, params, n = 10) {
sma <- TTR::SMA(data$y, n = n)
dplyr::bind_cols(data$x, tibble::tibble(sma))
}
)
stat_SMA <- function(mapping = NULL, data = NULL, geom = "line",
position = "identity", na.rm = FALSE, show.legend = NA,
inherit.aes = TRUE, n = 10,
...) {
layer(
stat = StatSMA, data = data, mapping = mapping, geom = geom,
position = position, show.legend = show.legend, inherit.aes = inherit.aes,
params = list(n = n, na.rm = na.rm, ...)
)
}
ggplot(data = AAPL, aes(date, adjusted)) +
geom_line() +
stat_SMA()
StatSMA <- ggproto("StatSMA", Stat,
required_aes = c("x", "y"),
compute_group = function(data, scales, params, n = 10) {
# sma <- TTR::SMA(data$y, n = n)
# dplyr::bind_cols(data$x, tibble::tibble(sma))
rng <- range(data$x, na.rm = TRUE)
grid <- data.frame(x = rng)
mod <- lm(y ~ x, data = data)
grid$y <- predict(mod, newdata = grid)
grid
}
)
stat_SMA <- function(mapping = NULL, data = NULL, geom = "line",
position = "identity", na.rm = FALSE, show.legend = NA,
inherit.aes = TRUE, n = 10,
...) {
layer(
stat = StatSMA, data = data, mapping = mapping, geom = geom,
position = position, show.legend = show.legend, inherit.aes = inherit.aes,
params = list(n = n, na.rm = na.rm, ...)
)
}
ggplot(data = AAPL, aes(date, adjusted)) +
geom_line() +
stat_SMA()
range(AAPL$date)
StatSMA <- ggproto("StatSMA", Stat,
required_aes = c("x", "y"),
compute_group = function(data, scales, params, n = 10) {
# sma <- TTR::SMA(data$y, n = n)
# dplyr::bind_cols(data$x, tibble::tibble(sma))
rng <- range(x, na.rm = TRUE)
grid <- data.frame(x = rng)
mod <- lm(y ~ x, data = data)
grid$y <- predict(mod, newdata = grid)
grid
}
)
stat_SMA <- function(mapping = NULL, data = NULL, geom = "line",
position = "identity", na.rm = FALSE, show.legend = NA,
inherit.aes = TRUE, n = 10,
...) {
layer(
stat = StatSMA, data = data, mapping = mapping, geom = geom,
position = position, show.legend = show.legend, inherit.aes = inherit.aes,
params = list(n = n, na.rm = na.rm, ...)
)
}
ggplot(data = AAPL, aes(date, adjusted)) +
geom_line() +
stat_SMA()
StatSMA <- ggproto("StatSMA", Stat,
required_aes = c("x", "y"),
compute_group = function(data, scales, params, n = 10) {
# sma <- TTR::SMA(data$y, n = n)
# dplyr::bind_cols(data$x, tibble::tibble(sma))
rng <- range(data$x, na.rm = TRUE)
grid <- data.frame(x = rng)
mod <- lm(y ~ x, data = data)
grid$y <- predict(mod, newdata = grid)
grid
}
)
stat_SMA <- function(mapping = NULL, data = NULL, geom = "line",
position = "identity", na.rm = FALSE, show.legend = NA,
inherit.aes = TRUE, n = 10,
...) {
layer(
stat = StatSMA, data = data, mapping = mapping, geom = geom,
position = position, show.legend = show.legend, inherit.aes = inherit.aes,
params = list(n = n, na.rm = na.rm, ...)
)
}
ggplot(data = AAPL, aes(date, adjusted)) +
geom_line() +
stat_SMA()
StatSMA <- ggproto("StatSMA", Stat,
required_aes = c("x", "y"),
compute_group = function(data, scales, params, n = 10) {
# sma <- TTR::SMA(data$y, n = n)
# dplyr::bind_cols(data$x, tibble::tibble(sma))
rng <- range(data$x, na.rm = TRUE)
grid <- data.frame(x = rng)
sma <- sma(data$y, n = n)
grid$y <- sma
grid
}
)
stat_SMA <- function(mapping = NULL, data = NULL, geom = "line",
position = "identity", na.rm = FALSE, show.legend = NA,
inherit.aes = TRUE, n = 10,
...) {
layer(
stat = StatSMA, data = data, mapping = mapping, geom = geom,
position = position, show.legend = show.legend, inherit.aes = inherit.aes,
params = list(n = n, na.rm = na.rm, ...)
)
}
ggplot(data = AAPL, aes(date, adjusted)) +
geom_line() +
stat_SMA()
StatSMA <- ggproto("StatSMA", Stat,
required_aes = c("x", "y"),
compute_group = function(data, scales, params, n = 10) {
# sma <- TTR::SMA(data$y, n = n)
# dplyr::bind_cols(data$x, tibble::tibble(sma))
rng <- range(data$x, na.rm = TRUE)
grid <- data.frame(x = rng)
sma <- TTR::SMA(data$y, n = n)
grid$y <- sma
grid
}
)
stat_SMA <- function(mapping = NULL, data = NULL, geom = "line",
position = "identity", na.rm = FALSE, show.legend = NA,
inherit.aes = TRUE, n = 10,
...) {
layer(
stat = StatSMA, data = data, mapping = mapping, geom = geom,
position = position, show.legend = show.legend, inherit.aes = inherit.aes,
params = list(n = n, na.rm = na.rm, ...)
)
}
ggplot(data = AAPL, aes(date, adjusted)) +
geom_line() +
stat_SMA()
StatSMA <- ggproto("StatSMA", Stat,
required_aes = c("x", "y"),
compute_group = function(data, scales, params, n = 10) {
# sma <- TTR::SMA(data$y, n = n)
# dplyr::bind_cols(data$x, tibble::tibble(sma))
grid <- data.frame(x = data$x)
sma <- TTR::SMA(data$y, n = n)
grid$y <- sma
grid
}
)
stat_SMA <- function(mapping = NULL, data = NULL, geom = "line",
position = "identity", na.rm = FALSE, show.legend = NA,
inherit.aes = TRUE, n = 10,
...) {
layer(
stat = StatSMA, data = data, mapping = mapping, geom = geom,
position = position, show.legend = show.legend, inherit.aes = inherit.aes,
params = list(n = n, na.rm = na.rm, ...)
)
}
ggplot(data = AAPL, aes(date, adjusted)) +
geom_line() +
stat_SMA()
StatSMA <- ggproto("StatSMA", Stat,
required_aes = c("x", "y"),
compute_group = function(data, scales, params, n = 10) {
# sma <- TTR::SMA(data$y, n = n)
# dplyr::bind_cols(data$x, tibble::tibble(sma))
grid <- data.frame(x = data$x)
sma <- TTR::SMA(data$y, n = n)
grid$y <- sma
grid
}
)
stat_SMA <- function(mapping = NULL, data = NULL, geom = "line",
position = "identity", na.rm = FALSE, show.legend = NA,
inherit.aes = TRUE, n = 10,
...) {
layer(
stat = StatSMA, data = data, mapping = mapping, geom = geom,
position = position, show.legend = show.legend, inherit.aes = inherit.aes,
params = list(n = n, na.rm = na.rm, ...)
)
}
ggplot(data = AAPL, aes(date, adjusted)) +
geom_line() +
stat_SMA(n = 200)
