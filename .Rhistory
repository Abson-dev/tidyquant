dplyr::rename(category = X1) %>%
tibble::rownames_to_column(var = "group") %>%
dplyr::mutate(group = as.numeric(group)) %>%
tidyr::gather(key = date, value = value, -c(group, category)) %>%
dplyr::arrange(group)
financial.ratios %>%
select(-TTM) %>%
dplyr::rename(category = X1) %>%
tibble::rownames_to_column(var = "group") %>%
dplyr::mutate(group = as.numeric(group)) %>%
tidyr::gather(key = date, value = value, -c(group, category)) %>%
dplyr::arrange(group) %>%
dplyr::mutate(date = stringr::str_split(date, "-01")) %>%
dplyr::mutate(date = lubridate::ymd(date))
financial.ratios %>%
select(-TTM) %>%
dplyr::rename(category = X1) %>%
tibble::rownames_to_column(var = "group") %>%
dplyr::mutate(group = as.numeric(group)) %>%
tidyr::gather(key = date, value = value, -c(group, category)) %>%
dplyr::arrange(group)
clean <- financial.ratios %>%
select(-TTM) %>%
dplyr::rename(category = X1) %>%
tibble::rownames_to_column(var = "group") %>%
dplyr::mutate(group = as.numeric(group)) %>%
tidyr::gather(key = date, value = value, -c(group, category)) %>%
dplyr::arrange(group)
View(clean)
AAPL
financial.ratios <-
suppressMessages(
suppressWarnings(
readr::read_csv(tmp, skip = 2, n_max = 18 - 2)
)
)
# Cleanup
clean <- financial.ratios %>%
select(-TTM) %>%
dplyr::rename(category = X1) %>%
tibble::rownames_to_column(var = "group") %>%
dplyr::mutate(group = as.numeric(group)) %>%
tidyr::gather(key = date, value = value, -c(group, category)) %>%
dplyr::arrange(group)
View(financial.ratios)
View(clean)
financial.ratios <-
suppressMessages(
suppressWarnings(
readr::read_csv(tmp, skip = 2, n_max = 18 - 3)
)
)
# Cleanup
clean <- financial.ratios %>%
select(-TTM) %>%
dplyr::rename(category = X1) %>%
tibble::rownames_to_column(var = "group") %>%
dplyr::mutate(group = as.numeric(group)) %>%
tidyr::gather(key = date, value = value, -c(group, category)) %>%
dplyr::arrange(group) %>%
dplyr::mutate(date = stringr::str_split(date, "-01")) %>%
dplyr::mutate(date = lubridate::ymd(date))
clean <- financial.ratios %>%
select(-TTM) %>%
dplyr::rename(category = X1) %>%
tibble::rownames_to_column(var = "group") %>%
dplyr::mutate(group = as.numeric(group)) %>%
tidyr::gather(key = date, value = value, -c(group, category)) %>%
dplyr::arrange(group)
View(clean)
AAPL
View(clean)
?readLines
key.ratios <- tibble(
category.primary   = c(rep("Financials", 1),
rep("Profitability", 2),
rep("Growth", 4),
rep("Cash Flow", 1),
rep("Financial Health", 2),
rep("Efficiency Ratios", 1)),
category.secondary = c("Financials", "Margin of Sales %", "Profitability",
"Revenue %", "Operating Income %", "Net Income %",
"EPS %", "Cash Flow Ratios", "Balance Sheet Items (in %",
"Liquidty/Financial Health", "Efficiency"),
line.start         = c(4, 22, 33, 45, 50, 55, 60, 67, 75, 97, 104),
line.end           = c(18, 30, 40, 48, 53, 58, 63, 71, 94, 100, 111)
)
key.ratios
key.ratios <- tibble(
category.primary   = c(rep("Financials", 1),
rep("Profitability", 2),
rep("Growth", 4),
rep("Cash Flow", 1),
rep("Financial Health", 2),
rep("Efficiency Ratios", 1)),
category.secondary = c("Financials", "Margin of Sales %", "Profitability",
"Revenue %", "Operating Income %", "Net Income %",
"EPS %", "Cash Flow Ratios", "Balance Sheet Items (in %",
"Liquidty/Financial Health", "Efficiency"),
column.row         = rep(3, 11),
line.start         = c(4, 22, 33, 45, 50, 55, 60, 67, 75, 97, 104),
line.end           = c(18, 30, 40, 48, 53, 58, 63, 71, 94, 100, 111)
)
key.ratios <- tibble(
category.primary   = c(rep("Financials", 1),
rep("Profitability", 2),
rep("Growth", 4),
rep("Cash Flow", 1),
rep("Financial Health", 2),
rep("Efficiency Ratios", 1)),
category.secondary = c("Financials", "Margin of Sales %", "Profitability",
"Revenue %", "Operating Income %", "Net Income %",
"EPS %", "Cash Flow Ratios", "Balance Sheet Items (in %",
"Liquidty/Financial Health", "Efficiency"),
column.row         = rep(3, 11),
line.start         = c(4, 22, 33, 45, 50, 55, 60, 67, 75, 97, 104),
line.end           = c(18, 30, 40, 48, 53, 58, 63, 71, 94, 100, 111)
)
key.ratios
?read_csv
AAPL
?read_lines
text <- readr::read_lines(tmp)
text
skip_rows <- c(1:2, 19:22, 31:32, 41:44, 49, 54, 59, 64:66, 72:74, 95:96, 101:103)
text <- readr::read_lines(tmp)[-skip_rows]
text
key_ratios_1 <- tibble(
section            = c(rep("Financials", 15),
rep("Profitability", 17),
rep("Growth", 12),
rep("Cash Flow", 5),
rep("Financial Health", 24),
rep("Efficiency Ratios", 8)),
sub.section        = c(rep("Financials", 15),
rep("Margin of Sales %", 9),
rep("Profitability", 8),
rep("Revenue %", 4),
rep("Operating Income %", 4),
rep("Net Income %", 4),
rep("EPS %", 4),
rep("Cash Flow Ratios", 5),
rep("Balance Sheet Items (in %)", 20),
rep("Liquidty/Financial Health", 4),
rep("Efficiency", 8))
)
15+17+12+5+24+8
key_ratios_1 <- tibble(
section            = c(rep("Financials", 15),
rep("Profitability", 17),
rep("Growth", 16),
rep("Cash Flow", 5),
rep("Financial Health", 24),
rep("Efficiency Ratios", 8)),
sub.section        = c(rep("Financials", 15),
rep("Margin of Sales %", 9),
rep("Profitability", 8),
rep("Revenue %", 4),
rep("Operating Income %", 4),
rep("Net Income %", 4),
rep("EPS %", 4),
rep("Cash Flow Ratios", 5),
rep("Balance Sheet Items (in %)", 20),
rep("Liquidty/Financial Health", 4),
rep("Efficiency", 8))
)
key_ratios_1
View(key_ratios_1)
key_ratios_2 <-
suppressMessages(
suppressWarnings(
readr::read_csv(text)
)
)
text
read_csv
?read_csv
skip_rows <- c(1:2, 19:22, 31:32, 41:44, 49, 54, 59, 64:66, 72:74, 95:96, 101:103)
text <- readr::read_lines(tmp)[-skip_rows]
# Get raw data
key_ratios_2 <-
suppressMessages(
suppressWarnings(
read.csv(text = text)
)
)
key_ratios_2
key_ratios_2 <-
suppressMessages(
suppressWarnings(
read_csv(file = text)
)
)
key_ratios_2 <-
suppressMessages(
suppressWarnings(
read.csv(file = text)
)
)
key_ratios_2 <-
suppressMessages(
suppressWarnings(
read.csv(text = text)
)
)
key_ratios_2 <-
suppressMessages(
suppressWarnings(
read.csv(text = text) %>%
as_tibble()
)
)
key_ratios_2
key_ratios_2 <-
suppressMessages(
suppressWarnings(
read.csv(text = text) %>%
as_tibble() %>%
mutate_all(as.character)
)
)
key_ratios_2
key_ratios_2 <-
suppressMessages(
suppressWarnings(
read.csv(text = text, na.strings=c("","NA")) %>%
as_tibble() %>%
mutate_all(as.character)
)
)
key_ratios_2
key_ratios <- dplyr::bind_cols(key_ratios_1, key_ratios_2)
key_ratios_1
key_ratios_2
AAPL
skip_rows <- c(1:2, 19:21, 31:32, 41:44, 49, 54, 59, 64:66, 72:74, 95:96, 101:103)
text <- readr::read_lines(tmp)[-skip_rows]
# Get raw data
key_ratios_2 <-
suppressMessages(
suppressWarnings(
read.csv(text = text, na.strings=c("","NA")) %>%
tibble::as_tibble() %>%
dplyr::mutate_all(as.character)
)
)
key_ratios <- dplyr::bind_cols(key_ratios_1, key_ratios_2)
key_ratios
View(key_ratios)
key_ratios_raw <- dplyr::bind_cols(key_ratios_1, key_ratios_2)
key_ratios <- key_ratios_raw %>%
select(-TTM) %>%
dplyr::rename(category = X1) %>%
tibble::rownames_to_column(var = "group") %>%
dplyr::mutate(group = as.numeric(group)) %>%
tidyr::gather(key = date, value = value, -c(group, category))
key_ratios <- key_ratios_raw %>%
select(-TTM) %>%
dplyr::rename(category = X) %>%
tibble::rownames_to_column(var = "group") %>%
dplyr::mutate(group = as.numeric(group)) %>%
tidyr::gather(key = date, value = value, -c(group, category)) %>%
dplyr::arrange(group)
key_ratios
key_ratios <- key_ratios_raw %>%
select(-TTM) %>%
dplyr::rename(category = X) %>%
tibble::rownames_to_column(var = "group") %>%
dplyr::mutate(group = as.numeric(group)) %>%
tidyr::gather(key = date, value = value, -c(group, section, sub.section, category)) %>%
dplyr::arrange(group)
key_ratios
?str_sub
?lubridate::yq
ymd("2016.09")
ym("2016.09")
yq("2016.09")
yq("2016.09", truncated = 2)
yq("2016-09", truncated = 2)
ymd("2016-09", truncated = 2)
key_ratios <- key_ratios_raw %>%
select(-TTM) %>%
dplyr::rename(category = X) %>%
tibble::rownames_to_column(var = "group") %>%
dplyr::mutate(group = as.numeric(group)) %>%
tidyr::gather(key = date.fye, value = value, -c(group, section, sub.section, category)) %>%
dplyr::arrange(group)
key_ratios
key_ratios <- key_ratios_raw %>%
select(-TTM) %>%
dplyr::rename(category = X) %>%
tibble::rownames_to_column(var = "group") %>%
dplyr::mutate(group = as.numeric(group)) %>%
tidyr::gather(key = date.fye, value = value, -c(group, section, sub.section, category)) %>%
dplyr::arrange(group) %>%
dplyr::mutate(date.fye = stringr::str_sub(fye, start = 2, end = len(date.fye))
)
key_ratios <- key_ratios_raw %>%
select(-TTM) %>%
dplyr::rename(category = X) %>%
tibble::rownames_to_column(var = "group") %>%
dplyr::mutate(group = as.numeric(group)) %>%
tidyr::gather(key = date.fye, value = value, -c(group, section, sub.section, category)) %>%
dplyr::arrange(group)
key_ratios
key_ratios <- key_ratios_raw %>%
select(-TTM) %>%
dplyr::rename(category = X) %>%
tibble::rownames_to_column(var = "group") %>%
dplyr::mutate(group = as.numeric(group)) %>%
tidyr::gather(key = date.fye, value = value, -c(group, section, sub.section, category)) %>%
dplyr::arrange(group) %>%
dplyr::mutate(date.fye = stringr::str_sub(date.fye, start = 2, end = len(date.fye)))
key_ratios <- key_ratios_raw %>%
select(-TTM) %>%
dplyr::rename(category = X) %>%
tibble::rownames_to_column(var = "group") %>%
dplyr::mutate(group = as.numeric(group)) %>%
tidyr::gather(key = date.fye, value = value, -c(group, section, sub.section, category)) %>%
dplyr::arrange(group) %>%
dplyr::mutate(date.fye = stringr::str_sub(date.fye, start = 2, end = length(date.fye)))
key_ratios
key_ratios <- key_ratios_raw %>%
select(-TTM) %>%
dplyr::rename(category = X) %>%
tibble::rownames_to_column(var = "group") %>%
dplyr::mutate(group = as.numeric(group)) %>%
tidyr::gather(key = date.fye, value = value, -c(group, section, sub.section, category)) %>%
dplyr::arrange(group) %>%
dplyr::mutate(date.fye = stringr::str_sub(date.fye, start = 2, end = length(date.fye))) %>%
dplyr::mutate(date.fye = stringr::str_replace(date.fye, ".", "-"))
key_ratios
key_ratios <- key_ratios_raw %>%
select(-TTM) %>%
dplyr::rename(category = X) %>%
tibble::rownames_to_column(var = "group") %>%
dplyr::mutate(group = as.numeric(group)) %>%
tidyr::gather(key = date.fye, value = value, -c(group, section, sub.section, category)) %>%
dplyr::arrange(group) %>%
dplyr::mutate(date.fye = stringr::str_sub(date.fye, start = 2, end = length(date.fye))) %>%
dplyr::mutate(date.fye = stringr::str_replace(date.fye, "\\.", "-"))
key_ratios
key_ratios <- key_ratios_raw %>%
select(-TTM) %>%
dplyr::rename(category = X) %>%
tibble::rownames_to_column(var = "group") %>%
dplyr::mutate(group = as.numeric(group)) %>%
tidyr::gather(key = date.fye, value = value, -c(group, section, sub.section, category)) %>%
dplyr::arrange(group) %>%
dplyr::mutate(date.fye = stringr::str_sub(date.fye, start = 2, end = length(date.fye))) %>%
dplyr::mutate(date.fye = stringr::str_replace(date.fye, "\\.", "-")) %>%
dplyr::mutate(date.fye = lubridate::ymd(date.fye, truncated = 2))
key_ratios
rm(key.ratios)
key_ratios <- key_ratios_raw %>%
select(-TTM) %>%
dplyr::rename(category = X) %>%
tibble::rownames_to_column(var = "group") %>%
dplyr::mutate(group = as.numeric(group)) %>%
tidyr::gather(key = date, value = value, -c(group, section, sub.section, category)) %>%
dplyr::arrange(group) %>%
dplyr::mutate(date = stringr::str_sub(date, start = 2, end = length(date))) %>%
dplyr::mutate(date = stringr::str_replace(date, "\\.", "-")) %>%
dplyr::mutate(date = lubridate::ymd(date, truncated = 2))
key_ratios
key_ratios <- key_ratios_raw %>%
select(-TTM) %>%
dplyr::rename(category = X) %>%
tibble::rownames_to_column(var = "group") %>%
dplyr::mutate(group = as.numeric(group)) %>%
tidyr::gather(key = date, value = value, -c(group, section, sub.section, category)) %>%
dplyr::arrange(group) %>%
dplyr::mutate(date = stringr::str_sub(date, start = 2, end = length(date))) %>%
dplyr::mutate(date = stringr::str_replace(date, "\\.", "-")) %>%
dplyr::mutate(date = lubridate::ymd(date, truncated = 2)) %>%
dplyr::mutate(value = stringr::str_replace(value, ",", ""))
key_ratios
key_ratios <- key_ratios_raw %>%
select(-TTM) %>%
dplyr::rename(category = X) %>%
tibble::rownames_to_column(var = "group") %>%
dplyr::mutate(group = as.numeric(group)) %>%
tidyr::gather(key = date, value = value, -c(group, section, sub.section, category)) %>%
dplyr::arrange(group) %>%
dplyr::mutate(date = stringr::str_sub(date, start = 2, end = length(date))) %>%
dplyr::mutate(date = stringr::str_replace(date, "\\.", "-")) %>%
dplyr::mutate(date = lubridate::ymd(date, truncated = 2)) %>%
dplyr::mutate(value = stringr::str_replace(value, ",", "")) %>%
dplyr::mutate(value = as.double(value))
key_ratios
key_ratios <- key_ratios_raw %>%
dplyr::select(-TTM) %>%
dplyr::rename(category = X) %>%
tibble::rownames_to_column(var = "group") %>%
dplyr::mutate(group = as.numeric(group)) %>%
tidyr::gather(key = date, value = value, -c(group, section, sub.section, category)) %>%
dplyr::arrange(group) %>%
dplyr::mutate(date = stringr::str_sub(date, start = 2, end = length(date))) %>%
dplyr::mutate(date = stringr::str_replace(date, "\\.", "-")) %>%
dplyr::mutate(date = lubridate::ymd(date, truncated = 2)) %>%
dplyr::mutate(value = stringr::str_replace(value, ",", "")) %>%
dplyr::mutate(value = as.double(value)) %>%
dplyr::select(section, sub.section, group, category, date, value) %>%
tidyr::nest(section)
key_ratios
key_ratios <- key_ratios_raw %>%
dplyr::select(-TTM) %>%
dplyr::rename(category = X) %>%
tibble::rownames_to_column(var = "group") %>%
dplyr::mutate(group = as.numeric(group)) %>%
tidyr::gather(key = date, value = value, -c(group, section, sub.section, category)) %>%
dplyr::arrange(group) %>%
dplyr::mutate(date = stringr::str_sub(date, start = 2, end = length(date))) %>%
dplyr::mutate(date = stringr::str_replace(date, "\\.", "-")) %>%
dplyr::mutate(date = lubridate::ymd(date, truncated = 2)) %>%
dplyr::mutate(value = stringr::str_replace(value, ",", "")) %>%
dplyr::mutate(value = as.double(value)) %>%
dplyr::select(section, sub.section, group, category, date, value) %>%
dplyr::group_by(section) %>%
tidyr::nest()
key_ratios
devtools::load_all(".")
tq_get("AAPL", get = "key.ratios")
tq_get("SWKS", get = "key.ratios")
tq_get("???", get = "key.ratios")
tq_get("XYZ", get = "key.ratios")
devtools::load_all(".")
tq_get("XYZ", get = "key.ratios")
devtools::load_all(".")
tq_get("XYZ", get = "key.ratios")
tq_get("AAPL", get = "key.ratios")
tq_get("AAP", get = "key.ratios")
devtools::load_all(".")
tq_get("AAP", get = "key.ratios")
tq_get("AAPL", get = "key.ratios")
devtools::load_all(".")
test <- tibble(stock.symbol = c("AAPL", "GOOG", "XYZ")) %>%
dplyr::mutate(key.ratios = purrr::map(stock.symbol, ~tq_get(.x, get = "key.ratios")))
test
test <- tibble(stock.symbol = c("AAPL", "GOOG", "XYZ")) %>%
dplyr::mutate(key.ratios = purrr::map(stock.symbol, ~tq_get(.x, get = "financials")))
test
test <- tibble(stock.symbol = c("AAPL", "GOOG", "XYZ")) %>%
dplyr::mutate(key.ratios = purrr::map(stock.symbol, ~tq_get(.x, get = "key.ratios")))
test
tq_get("AAPL")
tq_get("SWKS")
tq_get("SWKS", get = "key.ratios")
?on.exit
unlink(tmp)
devtools::load_all(".")
tq_get("SWKS", get = "key.ratios")
tq_get("SWKS", get = "key.ratios") %>% unnest()
test1 <- tq_get("AAPL", get = get,
from = "2016-01-01", to = "2016-06-01",
adjust = TRUE, type = "splits")
get <- "key.ratios"
test1 <- tq_get("AAPL", get = get,
from = "2016-01-01", to = "2016-06-01",
adjust = TRUE, type = "splits")
test1
library(testthat)
test_that("Test returns tibble with correct rows and columns.", {
# Tibble
expect_is(test1, "tbl")
# Rows
expect_equal(nrow(test1), 6)
# Columns
expect_equal(ncol(test1), 2)
})
test_that("Test prints warning message on invalid x input.", {
expect_warning(tq_get("XYZ", get = get))
})
get <- "key.ratios"
test_that("Test prints warning message on invalid x input.", {
expect_warning(tq_get("XYZ", get = get))
})
test_that("Test returns NA on invalid x input.", {
expect_equal(suppressWarnings(tq_get("XYZ", get = get)), NA)
})
tq_get("XYZ", get = get)
tq_get_options()
document()
library(devtools)
document()
?tq_get
test()
get <- "key.ratios"
context(paste0("Testing tq_get(get = '", get, "')"))
test1 <- tq_get("AAPL", get = get,
from = "2016-01-01", to = "2016-06-01",
adjust = TRUE, type = "splits")
#### Tests
test_that("Test returns tibble with correct rows and columns.", {
# Tibble
expect_is(test1, "tbl")
# Rows
expect_equal(nrow(test1), 6)
# Columns
expect_equal(ncol(test1), 2)
})
test_that("Test prints warning message on invalid x input.", {
expect_warning(tq_get("XYZ", get = get))
})
test_that("Test returns NA on invalid x input.", {
expect_equal(suppressWarnings(tq_get("XYZ", get = get)), NA)
})
test()
AAPL_key_ratios <- tq_get("AAPL", get = "key.ratios")
AAPL_key_ratios
AAPL_key_ratios[3,2][[1]]
jsonlite::fromJSON("https://api.stlouisfed.org/fred/series?series_id=GNPCA&api_key=abcdefghijklmnopqrstuvwxyz123456&file_type=json")
